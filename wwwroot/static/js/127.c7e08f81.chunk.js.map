{"version":3,"file":"static/js/127.c7e08f81.chunk.js","mappings":"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","sources":["../node_modules/@microsoft/signalr/src/DefaultReconnectPolicy.ts","../node_modules/@microsoft/signalr/src/HeaderNames.ts","../node_modules/@microsoft/signalr/src/HttpClient.ts","../node_modules/@microsoft/signalr/src/AccessTokenHttpClient.ts","../node_modules/@microsoft/signalr/src/Errors.ts","../node_modules/@microsoft/signalr/src/ILogger.ts","../node_modules/@microsoft/signalr/src/Loggers.ts","../node_modules/@microsoft/signalr/src/Utils.ts","../node_modules/@microsoft/signalr/src/FetchHttpClient.ts","../node_modules/@microsoft/signalr/src/XhrHttpClient.ts","../node_modules/@microsoft/signalr/src/DefaultHttpClient.ts","../node_modules/@microsoft/signalr/src/ITransport.ts","../node_modules/@microsoft/signalr/src/AbortController.ts","../node_modules/@microsoft/signalr/src/LongPollingTransport.ts","../node_modules/@microsoft/signalr/src/ServerSentEventsTransport.ts","../node_modules/@microsoft/signalr/src/WebSocketTransport.ts","../node_modules/@microsoft/signalr/src/HttpConnection.ts","../node_modules/@microsoft/signalr/src/TextMessageFormat.ts","../node_modules/@microsoft/signalr/src/HandshakeProtocol.ts","../node_modules/@microsoft/signalr/src/IHubProtocol.ts","../node_modules/@microsoft/signalr/src/Subject.ts","../node_modules/@microsoft/signalr/src/MessageBuffer.ts","../node_modules/@microsoft/signalr/src/HubConnection.ts","../node_modules/@microsoft/signalr/src/JsonHubProtocol.ts","../node_modules/@microsoft/signalr/src/HubConnectionBuilder.ts"],"sourcesContent":["// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\n\r\nimport { IRetryPolicy, RetryContext } from \"./IRetryPolicy\";\r\n\r\n// 0, 2, 10, 30 second delays before reconnect attempts.\r\nconst DEFAULT_RETRY_DELAYS_IN_MILLISECONDS = [0, 2000, 10000, 30000, null];\r\n\r\n/** @private */\r\nexport class DefaultReconnectPolicy implements IRetryPolicy {\r\n    private readonly _retryDelays: (number | null)[];\r\n\r\n    constructor(retryDelays?: number[]) {\r\n        this._retryDelays = retryDelays !== undefined ? [...retryDelays, null] : DEFAULT_RETRY_DELAYS_IN_MILLISECONDS;\r\n    }\r\n\r\n    public nextRetryDelayInMilliseconds(retryContext: RetryContext): number | null {\r\n        return this._retryDelays[retryContext.previousRetryCount];\r\n    }\r\n}\r\n","// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\n\r\nexport abstract class HeaderNames {\r\n    static readonly Authorization = \"Authorization\";\r\n    static readonly Cookie = \"Cookie\";\r\n}\r\n","// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\n\r\nimport { AbortSignal } from \"./AbortController\";\r\nimport { MessageHeaders } from \"./IHubProtocol\";\r\n\r\n/** Represents an HTTP request. */\r\nexport interface HttpRequest {\r\n    /** The HTTP method to use for the request. */\r\n    method?: string;\r\n\r\n    /** The URL for the request. */\r\n    url?: string;\r\n\r\n    /** The body content for the request. May be a string or an ArrayBuffer (for binary data). */\r\n    content?: string | ArrayBuffer;\r\n\r\n    /** An object describing headers to apply to the request. */\r\n    headers?: MessageHeaders;\r\n\r\n    /** The XMLHttpRequestResponseType to apply to the request. */\r\n    responseType?: XMLHttpRequestResponseType;\r\n\r\n    /** An AbortSignal that can be monitored for cancellation. */\r\n    abortSignal?: AbortSignal;\r\n\r\n    /** The time to wait for the request to complete before throwing a TimeoutError. Measured in milliseconds. */\r\n    timeout?: number;\r\n\r\n    /** This controls whether credentials such as cookies are sent in cross-site requests. */\r\n    withCredentials?: boolean;\r\n}\r\n\r\n/** Represents an HTTP response. */\r\nexport class HttpResponse {\r\n    /** Constructs a new instance of {@link @microsoft/signalr.HttpResponse} with the specified status code.\r\n     *\r\n     * @param {number} statusCode The status code of the response.\r\n     */\r\n    constructor(statusCode: number);\r\n\r\n    /** Constructs a new instance of {@link @microsoft/signalr.HttpResponse} with the specified status code and message.\r\n     *\r\n     * @param {number} statusCode The status code of the response.\r\n     * @param {string} statusText The status message of the response.\r\n     */\r\n    constructor(statusCode: number, statusText: string);\r\n\r\n    /** Constructs a new instance of {@link @microsoft/signalr.HttpResponse} with the specified status code, message and string content.\r\n     *\r\n     * @param {number} statusCode The status code of the response.\r\n     * @param {string} statusText The status message of the response.\r\n     * @param {string} content The content of the response.\r\n     */\r\n    constructor(statusCode: number, statusText: string, content: string);\r\n\r\n    /** Constructs a new instance of {@link @microsoft/signalr.HttpResponse} with the specified status code, message and binary content.\r\n     *\r\n     * @param {number} statusCode The status code of the response.\r\n     * @param {string} statusText The status message of the response.\r\n     * @param {ArrayBuffer} content The content of the response.\r\n     */\r\n    constructor(statusCode: number, statusText: string, content: ArrayBuffer);\r\n\r\n    /** Constructs a new instance of {@link @microsoft/signalr.HttpResponse} with the specified status code, message and binary content.\r\n     *\r\n     * @param {number} statusCode The status code of the response.\r\n     * @param {string} statusText The status message of the response.\r\n     * @param {string | ArrayBuffer} content The content of the response.\r\n     */\r\n    constructor(statusCode: number, statusText: string, content: string | ArrayBuffer);\r\n    constructor(\r\n        public readonly statusCode: number,\r\n        public readonly statusText?: string,\r\n        public readonly content?: string | ArrayBuffer) {\r\n    }\r\n}\r\n\r\n/** Abstraction over an HTTP client.\r\n *\r\n * This class provides an abstraction over an HTTP client so that a different implementation can be provided on different platforms.\r\n */\r\nexport abstract class HttpClient {\r\n    /** Issues an HTTP GET request to the specified URL, returning a Promise that resolves with an {@link @microsoft/signalr.HttpResponse} representing the result.\r\n     *\r\n     * @param {string} url The URL for the request.\r\n     * @returns {Promise<HttpResponse>} A Promise that resolves with an {@link @microsoft/signalr.HttpResponse} describing the response, or rejects with an Error indicating a failure.\r\n     */\r\n    public get(url: string): Promise<HttpResponse>;\r\n\r\n    /** Issues an HTTP GET request to the specified URL, returning a Promise that resolves with an {@link @microsoft/signalr.HttpResponse} representing the result.\r\n     *\r\n     * @param {string} url The URL for the request.\r\n     * @param {HttpRequest} options Additional options to configure the request. The 'url' field in this object will be overridden by the url parameter.\r\n     * @returns {Promise<HttpResponse>} A Promise that resolves with an {@link @microsoft/signalr.HttpResponse} describing the response, or rejects with an Error indicating a failure.\r\n     */\r\n    public get(url: string, options: HttpRequest): Promise<HttpResponse>;\r\n    public get(url: string, options?: HttpRequest): Promise<HttpResponse> {\r\n        return this.send({\r\n            ...options,\r\n            method: \"GET\",\r\n            url,\r\n        });\r\n    }\r\n\r\n    /** Issues an HTTP POST request to the specified URL, returning a Promise that resolves with an {@link @microsoft/signalr.HttpResponse} representing the result.\r\n     *\r\n     * @param {string} url The URL for the request.\r\n     * @returns {Promise<HttpResponse>} A Promise that resolves with an {@link @microsoft/signalr.HttpResponse} describing the response, or rejects with an Error indicating a failure.\r\n     */\r\n    public post(url: string): Promise<HttpResponse>;\r\n\r\n    /** Issues an HTTP POST request to the specified URL, returning a Promise that resolves with an {@link @microsoft/signalr.HttpResponse} representing the result.\r\n     *\r\n     * @param {string} url The URL for the request.\r\n     * @param {HttpRequest} options Additional options to configure the request. The 'url' field in this object will be overridden by the url parameter.\r\n     * @returns {Promise<HttpResponse>} A Promise that resolves with an {@link @microsoft/signalr.HttpResponse} describing the response, or rejects with an Error indicating a failure.\r\n     */\r\n    public post(url: string, options: HttpRequest): Promise<HttpResponse>;\r\n    public post(url: string, options?: HttpRequest): Promise<HttpResponse> {\r\n        return this.send({\r\n            ...options,\r\n            method: \"POST\",\r\n            url,\r\n        });\r\n    }\r\n\r\n    /** Issues an HTTP DELETE request to the specified URL, returning a Promise that resolves with an {@link @microsoft/signalr.HttpResponse} representing the result.\r\n     *\r\n     * @param {string} url The URL for the request.\r\n     * @returns {Promise<HttpResponse>} A Promise that resolves with an {@link @microsoft/signalr.HttpResponse} describing the response, or rejects with an Error indicating a failure.\r\n     */\r\n    public delete(url: string): Promise<HttpResponse>;\r\n\r\n    /** Issues an HTTP DELETE request to the specified URL, returning a Promise that resolves with an {@link @microsoft/signalr.HttpResponse} representing the result.\r\n     *\r\n     * @param {string} url The URL for the request.\r\n     * @param {HttpRequest} options Additional options to configure the request. The 'url' field in this object will be overridden by the url parameter.\r\n     * @returns {Promise<HttpResponse>} A Promise that resolves with an {@link @microsoft/signalr.HttpResponse} describing the response, or rejects with an Error indicating a failure.\r\n     */\r\n    public delete(url: string, options: HttpRequest): Promise<HttpResponse>;\r\n    public delete(url: string, options?: HttpRequest): Promise<HttpResponse> {\r\n        return this.send({\r\n            ...options,\r\n            method: \"DELETE\",\r\n            url,\r\n        });\r\n    }\r\n\r\n    /** Issues an HTTP request to the specified URL, returning a {@link Promise} that resolves with an {@link @microsoft/signalr.HttpResponse} representing the result.\r\n     *\r\n     * @param {HttpRequest} request An {@link @microsoft/signalr.HttpRequest} describing the request to send.\r\n     * @returns {Promise<HttpResponse>} A Promise that resolves with an HttpResponse describing the response, or rejects with an Error indicating a failure.\r\n     */\r\n    public abstract send(request: HttpRequest): Promise<HttpResponse>;\r\n\r\n    /** Gets all cookies that apply to the specified URL.\r\n     *\r\n     * @param url The URL that the cookies are valid for.\r\n     * @returns {string} A string containing all the key-value cookie pairs for the specified URL.\r\n     */\r\n    // @ts-ignore\r\n    public getCookieString(url: string): string {\r\n        return \"\";\r\n    }\r\n}\r\n","// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\n\r\nimport { HeaderNames } from \"./HeaderNames\";\r\nimport { HttpClient, HttpRequest, HttpResponse } from \"./HttpClient\";\r\n\r\n/** @private */\r\nexport class AccessTokenHttpClient extends HttpClient {\r\n    private _innerClient: HttpClient;\r\n    _accessToken: string | undefined;\r\n    _accessTokenFactory: (() => string | Promise<string>) | undefined;\r\n\r\n    constructor(innerClient: HttpClient, accessTokenFactory: (() => string | Promise<string>) | undefined) {\r\n        super();\r\n\r\n        this._innerClient = innerClient;\r\n        this._accessTokenFactory = accessTokenFactory;\r\n    }\r\n\r\n    public async send(request: HttpRequest): Promise<HttpResponse> {\r\n        let allowRetry = true;\r\n        if (this._accessTokenFactory && (!this._accessToken || (request.url && request.url.indexOf(\"/negotiate?\") > 0))) {\r\n            // don't retry if the request is a negotiate or if we just got a potentially new token from the access token factory\r\n            allowRetry = false;\r\n            this._accessToken = await this._accessTokenFactory();\r\n        }\r\n        this._setAuthorizationHeader(request);\r\n        const response = await this._innerClient.send(request);\r\n\r\n        if (allowRetry && response.statusCode === 401 && this._accessTokenFactory) {\r\n            this._accessToken = await this._accessTokenFactory();\r\n            this._setAuthorizationHeader(request);\r\n            return await this._innerClient.send(request);\r\n        }\r\n        return response;\r\n    }\r\n\r\n    private _setAuthorizationHeader(request: HttpRequest) {\r\n        if (!request.headers) {\r\n            request.headers = {};\r\n        }\r\n        if (this._accessToken) {\r\n            request.headers[HeaderNames.Authorization] = `Bearer ${this._accessToken}`\r\n        }\r\n        // don't remove the header if there isn't an access token factory, the user manually added the header in this case\r\n        else if (this._accessTokenFactory) {\r\n            if (request.headers[HeaderNames.Authorization]) {\r\n                delete request.headers[HeaderNames.Authorization];\r\n            }\r\n        }\r\n    }\r\n\r\n    public getCookieString(url: string): string {\r\n        return this._innerClient.getCookieString(url);\r\n    }\r\n}","// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\n\r\nimport { HttpTransportType } from \"./ITransport\";\r\n\r\n/** Error thrown when an HTTP request fails. */\r\nexport class HttpError extends Error {\r\n    // @ts-ignore: Intentionally unused.\r\n    // eslint-disable-next-line @typescript-eslint/naming-convention\r\n    private __proto__: Error;\r\n\r\n    /** The HTTP status code represented by this error. */\r\n    public statusCode: number;\r\n\r\n    /** Constructs a new instance of {@link @microsoft/signalr.HttpError}.\r\n     *\r\n     * @param {string} errorMessage A descriptive error message.\r\n     * @param {number} statusCode The HTTP status code represented by this error.\r\n     */\r\n    constructor(errorMessage: string, statusCode: number) {\r\n        const trueProto = new.target.prototype;\r\n        super(`${errorMessage}: Status code '${statusCode}'`);\r\n        this.statusCode = statusCode;\r\n\r\n        // Workaround issue in Typescript compiler\r\n        // https://github.com/Microsoft/TypeScript/issues/13965#issuecomment-278570200\r\n        this.__proto__ = trueProto;\r\n    }\r\n}\r\n\r\n/** Error thrown when a timeout elapses. */\r\nexport class TimeoutError extends Error {\r\n    // @ts-ignore: Intentionally unused.\r\n    // eslint-disable-next-line @typescript-eslint/naming-convention\r\n    private __proto__: Error;\r\n\r\n    /** Constructs a new instance of {@link @microsoft/signalr.TimeoutError}.\r\n     *\r\n     * @param {string} errorMessage A descriptive error message.\r\n     */\r\n    constructor(errorMessage: string = \"A timeout occurred.\") {\r\n        const trueProto = new.target.prototype;\r\n        super(errorMessage);\r\n\r\n        // Workaround issue in Typescript compiler\r\n        // https://github.com/Microsoft/TypeScript/issues/13965#issuecomment-278570200\r\n        this.__proto__ = trueProto;\r\n    }\r\n}\r\n\r\n/** Error thrown when an action is aborted. */\r\nexport class AbortError extends Error {\r\n    // @ts-ignore: Intentionally unused.\r\n    // eslint-disable-next-line @typescript-eslint/naming-convention\r\n    private __proto__: Error;\r\n\r\n    /** Constructs a new instance of {@link AbortError}.\r\n     *\r\n     * @param {string} errorMessage A descriptive error message.\r\n     */\r\n    constructor(errorMessage: string = \"An abort occurred.\") {\r\n        const trueProto = new.target.prototype;\r\n        super(errorMessage);\r\n\r\n        // Workaround issue in Typescript compiler\r\n        // https://github.com/Microsoft/TypeScript/issues/13965#issuecomment-278570200\r\n        this.__proto__ = trueProto;\r\n    }\r\n}\r\n\r\n/** Error thrown when the selected transport is unsupported by the browser. */\r\n/** @private */\r\nexport class UnsupportedTransportError extends Error {\r\n    // @ts-ignore: Intentionally unused.\r\n    // eslint-disable-next-line @typescript-eslint/naming-convention\r\n    private __proto__: Error;\r\n\r\n    /** The {@link @microsoft/signalr.HttpTransportType} this error occurred on. */\r\n    public transport: HttpTransportType;\r\n\r\n    /** The type name of this error. */\r\n    public errorType: string;\r\n\r\n    /** Constructs a new instance of {@link @microsoft/signalr.UnsupportedTransportError}.\r\n     *\r\n     * @param {string} message A descriptive error message.\r\n     * @param {HttpTransportType} transport The {@link @microsoft/signalr.HttpTransportType} this error occurred on.\r\n     */\r\n    constructor(message: string, transport: HttpTransportType) {\r\n        const trueProto = new.target.prototype;\r\n        super(message);\r\n        this.transport = transport;\r\n        this.errorType = 'UnsupportedTransportError';\r\n\r\n        // Workaround issue in Typescript compiler\r\n        // https://github.com/Microsoft/TypeScript/issues/13965#issuecomment-278570200\r\n        this.__proto__ = trueProto;\r\n    }\r\n}\r\n\r\n/** Error thrown when the selected transport is disabled by the browser. */\r\n/** @private */\r\nexport class DisabledTransportError extends Error {\r\n    // @ts-ignore: Intentionally unused.\r\n    // eslint-disable-next-line @typescript-eslint/naming-convention\r\n    private __proto__: Error;\r\n\r\n    /** The {@link @microsoft/signalr.HttpTransportType} this error occurred on. */\r\n    public transport: HttpTransportType;\r\n\r\n    /** The type name of this error. */\r\n    public errorType: string;\r\n\r\n    /** Constructs a new instance of {@link @microsoft/signalr.DisabledTransportError}.\r\n     *\r\n     * @param {string} message A descriptive error message.\r\n     * @param {HttpTransportType} transport The {@link @microsoft/signalr.HttpTransportType} this error occurred on.\r\n     */\r\n    constructor(message: string, transport: HttpTransportType) {\r\n        const trueProto = new.target.prototype;\r\n        super(message);\r\n        this.transport = transport;\r\n        this.errorType = 'DisabledTransportError';\r\n\r\n        // Workaround issue in Typescript compiler\r\n        // https://github.com/Microsoft/TypeScript/issues/13965#issuecomment-278570200\r\n        this.__proto__ = trueProto;\r\n    }\r\n}\r\n\r\n/** Error thrown when the selected transport cannot be started. */\r\n/** @private */\r\nexport class FailedToStartTransportError extends Error {\r\n    // @ts-ignore: Intentionally unused.\r\n    // eslint-disable-next-line @typescript-eslint/naming-convention\r\n    private __proto__: Error;\r\n\r\n    /** The {@link @microsoft/signalr.HttpTransportType} this error occurred on. */\r\n    public transport: HttpTransportType;\r\n\r\n    /** The type name of this error. */\r\n    public errorType: string;\r\n\r\n    /** Constructs a new instance of {@link @microsoft/signalr.FailedToStartTransportError}.\r\n     *\r\n     * @param {string} message A descriptive error message.\r\n     * @param {HttpTransportType} transport The {@link @microsoft/signalr.HttpTransportType} this error occurred on.\r\n     */\r\n    constructor(message: string, transport: HttpTransportType) {\r\n        const trueProto = new.target.prototype;\r\n        super(message);\r\n        this.transport = transport;\r\n        this.errorType = 'FailedToStartTransportError';\r\n\r\n        // Workaround issue in Typescript compiler\r\n        // https://github.com/Microsoft/TypeScript/issues/13965#issuecomment-278570200\r\n        this.__proto__ = trueProto;\r\n    }\r\n}\r\n\r\n/** Error thrown when the negotiation with the server failed to complete. */\r\n/** @private */\r\nexport class FailedToNegotiateWithServerError extends Error {\r\n    // @ts-ignore: Intentionally unused.\r\n    // eslint-disable-next-line @typescript-eslint/naming-convention\r\n    private __proto__: Error;\r\n\r\n    /** The type name of this error. */\r\n    public errorType: string;\r\n\r\n    /** Constructs a new instance of {@link @microsoft/signalr.FailedToNegotiateWithServerError}.\r\n     *\r\n     * @param {string} message A descriptive error message.\r\n     */\r\n    constructor(message: string) {\r\n        const trueProto = new.target.prototype;\r\n        super(message);\r\n        this.errorType = 'FailedToNegotiateWithServerError';\r\n\r\n        // Workaround issue in Typescript compiler\r\n        // https://github.com/Microsoft/TypeScript/issues/13965#issuecomment-278570200\r\n        this.__proto__ = trueProto;\r\n    }\r\n}\r\n\r\n/** Error thrown when multiple errors have occurred. */\r\n/** @private */\r\nexport class AggregateErrors extends Error {\r\n    // @ts-ignore: Intentionally unused.\r\n    // eslint-disable-next-line @typescript-eslint/naming-convention\r\n    private __proto__: Error;\r\n\r\n    /** The collection of errors this error is aggregating. */\r\n    public innerErrors: Error[];\r\n\r\n    /** Constructs a new instance of {@link @microsoft/signalr.AggregateErrors}.\r\n     *\r\n     * @param {string} message A descriptive error message.\r\n     * @param {Error[]} innerErrors The collection of errors this error is aggregating.\r\n     */\r\n    constructor(message: string, innerErrors: Error[]) {\r\n        const trueProto = new.target.prototype;\r\n        super(message);\r\n\r\n        this.innerErrors = innerErrors;\r\n\r\n        // Workaround issue in Typescript compiler\r\n        // https://github.com/Microsoft/TypeScript/issues/13965#issuecomment-278570200\r\n        this.__proto__ = trueProto;\r\n    }\r\n}\r\n","// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\n\r\n// These values are designed to match the ASP.NET Log Levels since that's the pattern we're emulating here.\r\n/** Indicates the severity of a log message.\r\n *\r\n * Log Levels are ordered in increasing severity. So `Debug` is more severe than `Trace`, etc.\r\n */\r\nexport enum LogLevel {\r\n    /** Log level for very low severity diagnostic messages. */\r\n    Trace = 0,\r\n    /** Log level for low severity diagnostic messages. */\r\n    Debug = 1,\r\n    /** Log level for informational diagnostic messages. */\r\n    Information = 2,\r\n    /** Log level for diagnostic messages that indicate a non-fatal problem. */\r\n    Warning = 3,\r\n    /** Log level for diagnostic messages that indicate a failure in the current operation. */\r\n    Error = 4,\r\n    /** Log level for diagnostic messages that indicate a failure that will terminate the entire application. */\r\n    Critical = 5,\r\n    /** The highest possible log level. Used when configuring logging to indicate that no log messages should be emitted. */\r\n    None = 6,\r\n}\r\n\r\n/** An abstraction that provides a sink for diagnostic messages. */\r\nexport interface ILogger {\r\n    /** Called by the framework to emit a diagnostic message.\r\n     *\r\n     * @param {LogLevel} logLevel The severity level of the message.\r\n     * @param {string} message The message.\r\n     */\r\n    log(logLevel: LogLevel, message: string): void;\r\n}\r\n","// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\n\r\nimport { ILogger, LogLevel } from \"./ILogger\";\r\n\r\n/** A logger that does nothing when log messages are sent to it. */\r\nexport class NullLogger implements ILogger {\r\n    /** The singleton instance of the {@link @microsoft/signalr.NullLogger}. */\r\n    public static instance: ILogger = new NullLogger();\r\n\r\n    private constructor() {}\r\n\r\n    /** @inheritDoc */\r\n    // eslint-disable-next-line\r\n    public log(_logLevel: LogLevel, _message: string): void {\r\n    }\r\n}\r\n","// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\n\r\nimport { HttpClient } from \"./HttpClient\";\r\nimport { ILogger, LogLevel } from \"./ILogger\";\r\nimport { NullLogger } from \"./Loggers\";\r\nimport { IStreamSubscriber, ISubscription } from \"./Stream\";\r\nimport { Subject } from \"./Subject\";\r\nimport { IHttpConnectionOptions } from \"./IHttpConnectionOptions\";\r\n\r\n// Version token that will be replaced by the prepack command\r\n/** The version of the SignalR client. */\r\n\r\nexport const VERSION: string = \"0.0.0-DEV_BUILD\";\r\n/** @private */\r\nexport class Arg {\r\n    public static isRequired(val: any, name: string): void {\r\n        if (val === null || val === undefined) {\r\n            throw new Error(`The '${name}' argument is required.`);\r\n        }\r\n    }\r\n    public static isNotEmpty(val: string, name: string): void {\r\n        if (!val || val.match(/^\\s*$/)) {\r\n            throw new Error(`The '${name}' argument should not be empty.`);\r\n        }\r\n    }\r\n\r\n    public static isIn(val: any, values: any, name: string): void {\r\n        // TypeScript enums have keys for **both** the name and the value of each enum member on the type itself.\r\n        if (!(val in values)) {\r\n            throw new Error(`Unknown ${name} value: ${val}.`);\r\n        }\r\n    }\r\n}\r\n\r\n/** @private */\r\nexport class Platform {\r\n    // react-native has a window but no document so we should check both\r\n    public static get isBrowser(): boolean {\r\n        return !Platform.isNode && typeof window === \"object\" && typeof window.document === \"object\";\r\n    }\r\n\r\n    // WebWorkers don't have a window object so the isBrowser check would fail\r\n    public static get isWebWorker(): boolean {\r\n        return !Platform.isNode && typeof self === \"object\" && \"importScripts\" in self;\r\n    }\r\n\r\n    // react-native has a window but no document\r\n    static get isReactNative(): boolean {\r\n        return !Platform.isNode && typeof window === \"object\" && typeof window.document === \"undefined\";\r\n    }\r\n\r\n    // Node apps shouldn't have a window object, but WebWorkers don't either\r\n    // so we need to check for both WebWorker and window\r\n    public static get isNode(): boolean {\r\n        return typeof process !== \"undefined\" && process.release && process.release.name === \"node\";\r\n    }\r\n}\r\n\r\n/** @private */\r\nexport function getDataDetail(data: any, includeContent: boolean): string {\r\n    let detail = \"\";\r\n    if (isArrayBuffer(data)) {\r\n        detail = `Binary data of length ${data.byteLength}`;\r\n        if (includeContent) {\r\n            detail += `. Content: '${formatArrayBuffer(data)}'`;\r\n        }\r\n    } else if (typeof data === \"string\") {\r\n        detail = `String data of length ${data.length}`;\r\n        if (includeContent) {\r\n            detail += `. Content: '${data}'`;\r\n        }\r\n    }\r\n    return detail;\r\n}\r\n\r\n/** @private */\r\nexport function formatArrayBuffer(data: ArrayBuffer): string {\r\n    const view = new Uint8Array(data);\r\n\r\n    // Uint8Array.map only supports returning another Uint8Array?\r\n    let str = \"\";\r\n    view.forEach((num) => {\r\n        const pad = num < 16 ? \"0\" : \"\";\r\n        str += `0x${pad}${num.toString(16)} `;\r\n    });\r\n\r\n    // Trim of trailing space.\r\n    return str.substr(0, str.length - 1);\r\n}\r\n\r\n// Also in signalr-protocol-msgpack/Utils.ts\r\n/** @private */\r\nexport function isArrayBuffer(val: any): val is ArrayBuffer {\r\n    return val && typeof ArrayBuffer !== \"undefined\" &&\r\n        (val instanceof ArrayBuffer ||\r\n            // Sometimes we get an ArrayBuffer that doesn't satisfy instanceof\r\n            (val.constructor && val.constructor.name === \"ArrayBuffer\"));\r\n}\r\n\r\n/** @private */\r\nexport async function sendMessage(logger: ILogger, transportName: string, httpClient: HttpClient, url: string,\r\n                                  content: string | ArrayBuffer, options: IHttpConnectionOptions): Promise<void> {\r\n    const headers: {[k: string]: string} = {};\r\n\r\n    const [name, value] = getUserAgentHeader();\r\n    headers[name] = value;\r\n\r\n    logger.log(LogLevel.Trace, `(${transportName} transport) sending data. ${getDataDetail(content, options.logMessageContent!)}.`);\r\n\r\n    const responseType = isArrayBuffer(content) ? \"arraybuffer\" : \"text\";\r\n    const response = await httpClient.post(url, {\r\n        content,\r\n        headers: { ...headers, ...options.headers},\r\n        responseType,\r\n        timeout: options.timeout,\r\n        withCredentials: options.withCredentials,\r\n    });\r\n\r\n    logger.log(LogLevel.Trace, `(${transportName} transport) request complete. Response status: ${response.statusCode}.`);\r\n}\r\n\r\n/** @private */\r\nexport function createLogger(logger?: ILogger | LogLevel): ILogger {\r\n    if (logger === undefined) {\r\n        return new ConsoleLogger(LogLevel.Information);\r\n    }\r\n\r\n    if (logger === null) {\r\n        return NullLogger.instance;\r\n    }\r\n\r\n    if ((logger as ILogger).log !== undefined) {\r\n        return logger as ILogger;\r\n    }\r\n\r\n    return new ConsoleLogger(logger as LogLevel);\r\n}\r\n\r\n/** @private */\r\nexport class SubjectSubscription<T> implements ISubscription<T> {\r\n    private _subject: Subject<T>;\r\n    private _observer: IStreamSubscriber<T>;\r\n\r\n    constructor(subject: Subject<T>, observer: IStreamSubscriber<T>) {\r\n        this._subject = subject;\r\n        this._observer = observer;\r\n    }\r\n\r\n    public dispose(): void {\r\n        const index: number = this._subject.observers.indexOf(this._observer);\r\n        if (index > -1) {\r\n            this._subject.observers.splice(index, 1);\r\n        }\r\n\r\n        if (this._subject.observers.length === 0 && this._subject.cancelCallback) {\r\n            this._subject.cancelCallback().catch((_) => { });\r\n        }\r\n    }\r\n}\r\n\r\n/** @private */\r\nexport class ConsoleLogger implements ILogger {\r\n    private readonly _minLevel: LogLevel;\r\n\r\n    // Public for testing purposes.\r\n    public out: {\r\n        error(message: any): void,\r\n        warn(message: any): void,\r\n        info(message: any): void,\r\n        log(message: any): void,\r\n    };\r\n\r\n    constructor(minimumLogLevel: LogLevel) {\r\n        this._minLevel = minimumLogLevel;\r\n        this.out = console;\r\n    }\r\n\r\n    public log(logLevel: LogLevel, message: string): void {\r\n        if (logLevel >= this._minLevel) {\r\n            const msg = `[${new Date().toISOString()}] ${LogLevel[logLevel]}: ${message}`;\r\n            switch (logLevel) {\r\n                case LogLevel.Critical:\r\n                case LogLevel.Error:\r\n                    this.out.error(msg);\r\n                    break;\r\n                case LogLevel.Warning:\r\n                    this.out.warn(msg);\r\n                    break;\r\n                case LogLevel.Information:\r\n                    this.out.info(msg);\r\n                    break;\r\n                default:\r\n                    // console.debug only goes to attached debuggers in Node, so we use console.log for Trace and Debug\r\n                    this.out.log(msg);\r\n                    break;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n/** @private */\r\nexport function getUserAgentHeader(): [string, string] {\r\n    let userAgentHeaderName = \"X-SignalR-User-Agent\";\r\n    if (Platform.isNode) {\r\n        userAgentHeaderName = \"User-Agent\";\r\n    }\r\n    return [ userAgentHeaderName, constructUserAgent(VERSION, getOsName(), getRuntime(), getRuntimeVersion()) ];\r\n}\r\n\r\n/** @private */\r\nexport function constructUserAgent(version: string, os: string, runtime: string, runtimeVersion: string | undefined): string {\r\n    // Microsoft SignalR/[Version] ([Detailed Version]; [Operating System]; [Runtime]; [Runtime Version])\r\n    let userAgent: string = \"Microsoft SignalR/\";\r\n\r\n    const majorAndMinor = version.split(\".\");\r\n    userAgent += `${majorAndMinor[0]}.${majorAndMinor[1]}`;\r\n    userAgent += ` (${version}; `;\r\n\r\n    if (os && os !== \"\") {\r\n        userAgent += `${os}; `;\r\n    } else {\r\n        userAgent += \"Unknown OS; \";\r\n    }\r\n\r\n    userAgent += `${runtime}`;\r\n\r\n    if (runtimeVersion) {\r\n        userAgent += `; ${runtimeVersion}`;\r\n    } else {\r\n        userAgent += \"; Unknown Runtime Version\";\r\n    }\r\n\r\n    userAgent += \")\";\r\n    return userAgent;\r\n}\r\n\r\n// eslint-disable-next-line spaced-comment\r\n/*#__PURE__*/ function getOsName(): string {\r\n    if (Platform.isNode) {\r\n        switch (process.platform) {\r\n            case \"win32\":\r\n                return \"Windows NT\";\r\n            case \"darwin\":\r\n                return \"macOS\";\r\n            case \"linux\":\r\n                return \"Linux\";\r\n            default:\r\n                return process.platform;\r\n        }\r\n    } else {\r\n        return \"\";\r\n    }\r\n}\r\n\r\n// eslint-disable-next-line spaced-comment\r\n/*#__PURE__*/ function getRuntimeVersion(): string | undefined {\r\n    if (Platform.isNode) {\r\n        return process.versions.node;\r\n    }\r\n    return undefined;\r\n}\r\n\r\nfunction getRuntime(): string {\r\n    if (Platform.isNode) {\r\n        return \"NodeJS\";\r\n    } else {\r\n        return \"Browser\";\r\n    }\r\n}\r\n\r\n/** @private */\r\nexport function getErrorString(e: any): string {\r\n    if (e.stack) {\r\n        return e.stack;\r\n    } else if (e.message) {\r\n        return e.message;\r\n    }\r\n    return `${e}`;\r\n}\r\n\r\n/** @private */\r\nexport function getGlobalThis(): unknown {\r\n    // globalThis is semi-new and not available in Node until v12\r\n    if (typeof globalThis !== \"undefined\") {\r\n        return globalThis;\r\n    }\r\n    if (typeof self !== \"undefined\") {\r\n        return self;\r\n    }\r\n    if (typeof window !== \"undefined\") {\r\n        return window;\r\n    }\r\n    if (typeof global !== \"undefined\") {\r\n        return global;\r\n    }\r\n    throw new Error(\"could not find global\");\r\n}\r\n","// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\n\r\n// @ts-ignore: This will be removed from built files and is here to make the types available during dev work\r\nimport { CookieJar } from \"@types/tough-cookie\";\r\n\r\nimport { AbortError, HttpError, TimeoutError } from \"./Errors\";\r\nimport { HttpClient, HttpRequest, HttpResponse } from \"./HttpClient\";\r\nimport { ILogger, LogLevel } from \"./ILogger\";\r\nimport { Platform, getGlobalThis, isArrayBuffer } from \"./Utils\";\r\n\r\nexport class FetchHttpClient extends HttpClient {\r\n    private readonly _abortControllerType: { prototype: AbortController, new(): AbortController };\r\n    private readonly _fetchType: (input: RequestInfo, init?: RequestInit) => Promise<Response>;\r\n    private readonly _jar?: CookieJar;\r\n\r\n    private readonly _logger: ILogger;\r\n\r\n    public constructor(logger: ILogger) {\r\n        super();\r\n        this._logger = logger;\r\n\r\n        // Node added a fetch implementation to the global scope starting in v18.\r\n        // We need to add a cookie jar in node to be able to share cookies with WebSocket\r\n        if (typeof fetch === \"undefined\" || Platform.isNode) {\r\n            // In order to ignore the dynamic require in webpack builds we need to do this magic\r\n            // @ts-ignore: TS doesn't know about these names\r\n            const requireFunc = typeof __webpack_require__ === \"function\" ? __non_webpack_require__ : require;\r\n\r\n            // Cookies aren't automatically handled in Node so we need to add a CookieJar to preserve cookies across requests\r\n            this._jar = new (requireFunc(\"tough-cookie\")).CookieJar();\r\n\r\n            if (typeof fetch === \"undefined\") {\r\n                this._fetchType = requireFunc(\"node-fetch\");\r\n            } else {\r\n                // Use fetch from Node if available\r\n                this._fetchType = fetch;\r\n            }\r\n\r\n            // node-fetch doesn't have a nice API for getting and setting cookies\r\n            // fetch-cookie will wrap a fetch implementation with a default CookieJar or a provided one\r\n            this._fetchType = requireFunc(\"fetch-cookie\")(this._fetchType, this._jar);\r\n        } else {\r\n            this._fetchType = fetch.bind(getGlobalThis());\r\n        }\r\n        if (typeof AbortController === \"undefined\") {\r\n            // In order to ignore the dynamic require in webpack builds we need to do this magic\r\n            // @ts-ignore: TS doesn't know about these names\r\n            const requireFunc = typeof __webpack_require__ === \"function\" ? __non_webpack_require__ : require;\r\n\r\n            // Node needs EventListener methods on AbortController which our custom polyfill doesn't provide\r\n            this._abortControllerType = requireFunc(\"abort-controller\");\r\n        } else {\r\n            this._abortControllerType = AbortController;\r\n        }\r\n    }\r\n\r\n    /** @inheritDoc */\r\n    public async send(request: HttpRequest): Promise<HttpResponse> {\r\n        // Check that abort was not signaled before calling send\r\n        if (request.abortSignal && request.abortSignal.aborted) {\r\n            throw new AbortError();\r\n        }\r\n\r\n        if (!request.method) {\r\n            throw new Error(\"No method defined.\");\r\n        }\r\n        if (!request.url) {\r\n            throw new Error(\"No url defined.\");\r\n        }\r\n\r\n        const abortController = new this._abortControllerType();\r\n\r\n        let error: any;\r\n        // Hook our abortSignal into the abort controller\r\n        if (request.abortSignal) {\r\n            request.abortSignal.onabort = () => {\r\n                abortController.abort();\r\n                error = new AbortError();\r\n            };\r\n        }\r\n\r\n        // If a timeout has been passed in, setup a timeout to call abort\r\n        // Type needs to be any to fit window.setTimeout and NodeJS.setTimeout\r\n        let timeoutId: any = null;\r\n        if (request.timeout) {\r\n            const msTimeout = request.timeout!;\r\n            timeoutId = setTimeout(() => {\r\n                abortController.abort();\r\n                this._logger.log(LogLevel.Warning, `Timeout from HTTP request.`);\r\n                error = new TimeoutError();\r\n            }, msTimeout);\r\n        }\r\n\r\n        if (request.content === \"\") {\r\n            request.content = undefined;\r\n        }\r\n        if (request.content) {\r\n            // Explicitly setting the Content-Type header for React Native on Android platform.\r\n            request.headers = request.headers || {};\r\n            if (isArrayBuffer(request.content)) {\r\n                request.headers[\"Content-Type\"] = \"application/octet-stream\";\r\n            } else {\r\n                request.headers[\"Content-Type\"] = \"text/plain;charset=UTF-8\";\r\n            }\r\n        }\r\n\r\n        let response: Response;\r\n        try {\r\n            response = await this._fetchType(request.url!, {\r\n                body: request.content,\r\n                cache: \"no-cache\",\r\n                credentials: request.withCredentials === true ? \"include\" : \"same-origin\",\r\n                headers: {\r\n                    \"X-Requested-With\": \"XMLHttpRequest\",\r\n                    ...request.headers,\r\n                },\r\n                method: request.method!,\r\n                mode: \"cors\",\r\n                redirect: \"follow\",\r\n                signal: abortController.signal,\r\n            });\r\n        } catch (e) {\r\n            if (error) {\r\n                throw error;\r\n            }\r\n            this._logger.log(\r\n                LogLevel.Warning,\r\n                `Error from HTTP request. ${e}.`,\r\n            );\r\n            throw e;\r\n        } finally {\r\n            if (timeoutId) {\r\n                clearTimeout(timeoutId);\r\n            }\r\n            if (request.abortSignal) {\r\n                request.abortSignal.onabort = null;\r\n            }\r\n        }\r\n\r\n        if (!response.ok) {\r\n            const errorMessage = await deserializeContent(response, \"text\") as string;\r\n            throw new HttpError(errorMessage || response.statusText, response.status);\r\n        }\r\n\r\n        const content = deserializeContent(response, request.responseType);\r\n        const payload = await content;\r\n\r\n        return new HttpResponse(\r\n            response.status,\r\n            response.statusText,\r\n            payload,\r\n        );\r\n    }\r\n\r\n    public getCookieString(url: string): string {\r\n        let cookies: string = \"\";\r\n        if (Platform.isNode && this._jar) {\r\n            // @ts-ignore: unused variable\r\n            this._jar.getCookies(url, (e, c) => cookies = c.join(\"; \"));\r\n        }\r\n        return cookies;\r\n    }\r\n}\r\n\r\nfunction deserializeContent(response: Response, responseType?: XMLHttpRequestResponseType): Promise<string | ArrayBuffer> {\r\n    let content;\r\n    switch (responseType) {\r\n        case \"arraybuffer\":\r\n            content = response.arrayBuffer();\r\n            break;\r\n        case \"text\":\r\n            content = response.text();\r\n            break;\r\n        case \"blob\":\r\n        case \"document\":\r\n        case \"json\":\r\n            throw new Error(`${responseType} is not supported.`);\r\n        default:\r\n            content = response.text();\r\n            break;\r\n    }\r\n\r\n    return content;\r\n}\r\n","// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\n\r\nimport { AbortError, HttpError, TimeoutError } from \"./Errors\";\r\nimport { HttpClient, HttpRequest, HttpResponse } from \"./HttpClient\";\r\nimport { ILogger, LogLevel } from \"./ILogger\";\r\nimport { isArrayBuffer } from \"./Utils\";\r\n\r\nexport class XhrHttpClient extends HttpClient {\r\n    private readonly _logger: ILogger;\r\n\r\n    public constructor(logger: ILogger) {\r\n        super();\r\n        this._logger = logger;\r\n    }\r\n\r\n    /** @inheritDoc */\r\n    public send(request: HttpRequest): Promise<HttpResponse> {\r\n        // Check that abort was not signaled before calling send\r\n        if (request.abortSignal && request.abortSignal.aborted) {\r\n            return Promise.reject(new AbortError());\r\n        }\r\n\r\n        if (!request.method) {\r\n            return Promise.reject(new Error(\"No method defined.\"));\r\n        }\r\n        if (!request.url) {\r\n            return Promise.reject(new Error(\"No url defined.\"));\r\n        }\r\n\r\n        return new Promise<HttpResponse>((resolve, reject) => {\r\n            const xhr = new XMLHttpRequest();\r\n\r\n            xhr.open(request.method!, request.url!, true);\r\n            xhr.withCredentials = request.withCredentials === undefined ? true : request.withCredentials;\r\n            xhr.setRequestHeader(\"X-Requested-With\", \"XMLHttpRequest\");\r\n            if (request.content === \"\") {\r\n                request.content = undefined;\r\n            }\r\n            if (request.content) {\r\n                // Explicitly setting the Content-Type header for React Native on Android platform.\r\n                if (isArrayBuffer(request.content)) {\r\n                    xhr.setRequestHeader(\"Content-Type\", \"application/octet-stream\");\r\n                } else {\r\n                    xhr.setRequestHeader(\"Content-Type\", \"text/plain;charset=UTF-8\");\r\n                }\r\n            }\r\n\r\n            const headers = request.headers;\r\n            if (headers) {\r\n                Object.keys(headers)\r\n                    .forEach((header) => {\r\n                        xhr.setRequestHeader(header, headers[header]);\r\n                    });\r\n            }\r\n\r\n            if (request.responseType) {\r\n                xhr.responseType = request.responseType;\r\n            }\r\n\r\n            if (request.abortSignal) {\r\n                request.abortSignal.onabort = () => {\r\n                    xhr.abort();\r\n                    reject(new AbortError());\r\n                };\r\n            }\r\n\r\n            if (request.timeout) {\r\n                xhr.timeout = request.timeout;\r\n            }\r\n\r\n            xhr.onload = () => {\r\n                if (request.abortSignal) {\r\n                    request.abortSignal.onabort = null;\r\n                }\r\n\r\n                if (xhr.status >= 200 && xhr.status < 300) {\r\n                    resolve(new HttpResponse(xhr.status, xhr.statusText, xhr.response || xhr.responseText));\r\n                } else {\r\n                    reject(new HttpError(xhr.response || xhr.responseText || xhr.statusText, xhr.status));\r\n                }\r\n            };\r\n\r\n            xhr.onerror = () => {\r\n                this._logger.log(LogLevel.Warning, `Error from HTTP request. ${xhr.status}: ${xhr.statusText}.`);\r\n                reject(new HttpError(xhr.statusText, xhr.status));\r\n            };\r\n\r\n            xhr.ontimeout = () => {\r\n                this._logger.log(LogLevel.Warning, `Timeout from HTTP request.`);\r\n                reject(new TimeoutError());\r\n            };\r\n\r\n            xhr.send(request.content);\r\n        });\r\n    }\r\n}\r\n","// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\n\r\nimport { AbortError } from \"./Errors\";\r\nimport { FetchHttpClient } from \"./FetchHttpClient\";\r\nimport { HttpClient, HttpRequest, HttpResponse } from \"./HttpClient\";\r\nimport { ILogger } from \"./ILogger\";\r\nimport { Platform } from \"./Utils\";\r\nimport { XhrHttpClient } from \"./XhrHttpClient\";\r\n\r\n/** Default implementation of {@link @microsoft/signalr.HttpClient}. */\r\nexport class DefaultHttpClient extends HttpClient {\r\n    private readonly _httpClient: HttpClient;\r\n\r\n    /** Creates a new instance of the {@link @microsoft/signalr.DefaultHttpClient}, using the provided {@link @microsoft/signalr.ILogger} to log messages. */\r\n    public constructor(logger: ILogger) {\r\n        super();\r\n\r\n        if (typeof fetch !== \"undefined\" || Platform.isNode) {\r\n            this._httpClient = new FetchHttpClient(logger);\r\n        } else if (typeof XMLHttpRequest !== \"undefined\") {\r\n            this._httpClient = new XhrHttpClient(logger);\r\n        } else {\r\n            throw new Error(\"No usable HttpClient found.\");\r\n        }\r\n    }\r\n\r\n    /** @inheritDoc */\r\n    public send(request: HttpRequest): Promise<HttpResponse> {\r\n        // Check that abort was not signaled before calling send\r\n        if (request.abortSignal && request.abortSignal.aborted) {\r\n            return Promise.reject(new AbortError());\r\n        }\r\n\r\n        if (!request.method) {\r\n            return Promise.reject(new Error(\"No method defined.\"));\r\n        }\r\n        if (!request.url) {\r\n            return Promise.reject(new Error(\"No url defined.\"));\r\n        }\r\n\r\n        return this._httpClient.send(request);\r\n    }\r\n\r\n    public getCookieString(url: string): string {\r\n        return this._httpClient.getCookieString(url);\r\n    }\r\n}\r\n","// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\n\r\n// This will be treated as a bit flag in the future, so we keep it using power-of-two values.\r\n/** Specifies a specific HTTP transport type. */\r\nexport enum HttpTransportType {\r\n    /** Specifies no transport preference. */\r\n    None = 0,\r\n    /** Specifies the WebSockets transport. */\r\n    WebSockets = 1,\r\n    /** Specifies the Server-Sent Events transport. */\r\n    ServerSentEvents = 2,\r\n    /** Specifies the Long Polling transport. */\r\n    LongPolling = 4,\r\n}\r\n\r\n/** Specifies the transfer format for a connection. */\r\nexport enum TransferFormat {\r\n    /** Specifies that only text data will be transmitted over the connection. */\r\n    Text = 1,\r\n    /** Specifies that binary data will be transmitted over the connection. */\r\n    Binary = 2,\r\n}\r\n\r\n/** An abstraction over the behavior of transports. This is designed to support the framework and not intended for use by applications. */\r\nexport interface ITransport {\r\n    connect(url: string, transferFormat: TransferFormat): Promise<void>;\r\n    send(data: any): Promise<void>;\r\n    stop(): Promise<void>;\r\n    onreceive: ((data: string | ArrayBuffer) => void) | null;\r\n    onclose: ((error?: Error) => void) | null;\r\n}\r\n","// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\n\r\n// Rough polyfill of https://developer.mozilla.org/en-US/docs/Web/API/AbortController\r\n// We don't actually ever use the API being polyfilled, we always use the polyfill because\r\n// it's a very new API right now.\r\n\r\n// Not exported from index.\r\n/** @private */\r\nexport class AbortController implements AbortSignal {\r\n    private _isAborted: boolean = false;\r\n    public onabort: (() => void) | null = null;\r\n\r\n    public abort(): void {\r\n        if (!this._isAborted) {\r\n            this._isAborted = true;\r\n            if (this.onabort) {\r\n                this.onabort();\r\n            }\r\n        }\r\n    }\r\n\r\n    get signal(): AbortSignal {\r\n        return this;\r\n    }\r\n\r\n    get aborted(): boolean {\r\n        return this._isAborted;\r\n    }\r\n}\r\n\r\n/** Represents a signal that can be monitored to determine if a request has been aborted. */\r\nexport interface AbortSignal {\r\n    /** Indicates if the request has been aborted. */\r\n    aborted: boolean;\r\n    /** Set this to a handler that will be invoked when the request is aborted. */\r\n    onabort: (() => void) | null;\r\n}\r\n","// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\n\r\nimport { AbortController } from \"./AbortController\";\r\nimport { HttpError, TimeoutError } from \"./Errors\";\r\nimport { HttpClient, HttpRequest } from \"./HttpClient\";\r\nimport { ILogger, LogLevel } from \"./ILogger\";\r\nimport { ITransport, TransferFormat } from \"./ITransport\";\r\nimport { Arg, getDataDetail, getUserAgentHeader, sendMessage } from \"./Utils\";\r\nimport { IHttpConnectionOptions } from \"./IHttpConnectionOptions\";\r\n\r\n// Not exported from 'index', this type is internal.\r\n/** @private */\r\nexport class LongPollingTransport implements ITransport {\r\n    private readonly _httpClient: HttpClient;\r\n    private readonly _logger: ILogger;\r\n    private readonly _options: IHttpConnectionOptions;\r\n    private readonly _pollAbort: AbortController;\r\n\r\n    private _url?: string;\r\n    private _running: boolean;\r\n    private _receiving?: Promise<void>;\r\n    private _closeError?: Error | unknown;\r\n\r\n    public onreceive: ((data: string | ArrayBuffer) => void) | null;\r\n    public onclose: ((error?: Error | unknown) => void) | null;\r\n\r\n    // This is an internal type, not exported from 'index' so this is really just internal.\r\n    public get pollAborted(): boolean {\r\n        return this._pollAbort.aborted;\r\n    }\r\n\r\n    constructor(httpClient: HttpClient, logger: ILogger, options: IHttpConnectionOptions) {\r\n        this._httpClient = httpClient;\r\n        this._logger = logger;\r\n        this._pollAbort = new AbortController();\r\n        this._options = options;\r\n\r\n        this._running = false;\r\n\r\n        this.onreceive = null;\r\n        this.onclose = null;\r\n    }\r\n\r\n    public async connect(url: string, transferFormat: TransferFormat): Promise<void> {\r\n        Arg.isRequired(url, \"url\");\r\n        Arg.isRequired(transferFormat, \"transferFormat\");\r\n        Arg.isIn(transferFormat, TransferFormat, \"transferFormat\");\r\n\r\n        this._url = url;\r\n\r\n        this._logger.log(LogLevel.Trace, \"(LongPolling transport) Connecting.\");\r\n\r\n        // Allow binary format on Node and Browsers that support binary content (indicated by the presence of responseType property)\r\n        if (transferFormat === TransferFormat.Binary &&\r\n            (typeof XMLHttpRequest !== \"undefined\" && typeof new XMLHttpRequest().responseType !== \"string\")) {\r\n            throw new Error(\"Binary protocols over XmlHttpRequest not implementing advanced features are not supported.\");\r\n        }\r\n\r\n        const [name, value] = getUserAgentHeader();\r\n        const headers = { [name]: value, ...this._options.headers };\r\n\r\n        const pollOptions: HttpRequest = {\r\n            abortSignal: this._pollAbort.signal,\r\n            headers,\r\n            timeout: 100000,\r\n            withCredentials: this._options.withCredentials,\r\n        };\r\n\r\n        if (transferFormat === TransferFormat.Binary) {\r\n            pollOptions.responseType = \"arraybuffer\";\r\n        }\r\n\r\n        // Make initial long polling request\r\n        // Server uses first long polling request to finish initializing connection and it returns without data\r\n        const pollUrl = `${url}&_=${Date.now()}`;\r\n        this._logger.log(LogLevel.Trace, `(LongPolling transport) polling: ${pollUrl}.`);\r\n        const response = await this._httpClient.get(pollUrl, pollOptions);\r\n        if (response.statusCode !== 200) {\r\n            this._logger.log(LogLevel.Error, `(LongPolling transport) Unexpected response code: ${response.statusCode}.`);\r\n\r\n            // Mark running as false so that the poll immediately ends and runs the close logic\r\n            this._closeError = new HttpError(response.statusText || \"\", response.statusCode);\r\n            this._running = false;\r\n        } else {\r\n            this._running = true;\r\n        }\r\n\r\n        this._receiving = this._poll(this._url, pollOptions);\r\n    }\r\n\r\n    private async _poll(url: string, pollOptions: HttpRequest): Promise<void> {\r\n        try {\r\n            while (this._running) {\r\n                try {\r\n                    const pollUrl = `${url}&_=${Date.now()}`;\r\n                    this._logger.log(LogLevel.Trace, `(LongPolling transport) polling: ${pollUrl}.`);\r\n                    const response = await this._httpClient.get(pollUrl, pollOptions);\r\n\r\n                    if (response.statusCode === 204) {\r\n                        this._logger.log(LogLevel.Information, \"(LongPolling transport) Poll terminated by server.\");\r\n\r\n                        this._running = false;\r\n                    } else if (response.statusCode !== 200) {\r\n                        this._logger.log(LogLevel.Error, `(LongPolling transport) Unexpected response code: ${response.statusCode}.`);\r\n\r\n                        // Unexpected status code\r\n                        this._closeError = new HttpError(response.statusText || \"\", response.statusCode);\r\n                        this._running = false;\r\n                    } else {\r\n                        // Process the response\r\n                        if (response.content) {\r\n                            this._logger.log(LogLevel.Trace, `(LongPolling transport) data received. ${getDataDetail(response.content, this._options.logMessageContent!)}.`);\r\n                            if (this.onreceive) {\r\n                                this.onreceive(response.content);\r\n                            }\r\n                        } else {\r\n                            // This is another way timeout manifest.\r\n                            this._logger.log(LogLevel.Trace, \"(LongPolling transport) Poll timed out, reissuing.\");\r\n                        }\r\n                    }\r\n                } catch (e) {\r\n                    if (!this._running) {\r\n                        // Log but disregard errors that occur after stopping\r\n                        this._logger.log(LogLevel.Trace, `(LongPolling transport) Poll errored after shutdown: ${(e as any).message}`);\r\n                    } else {\r\n                        if (e instanceof TimeoutError) {\r\n                            // Ignore timeouts and reissue the poll.\r\n                            this._logger.log(LogLevel.Trace, \"(LongPolling transport) Poll timed out, reissuing.\");\r\n                        } else {\r\n                            // Close the connection with the error as the result.\r\n                            this._closeError = e;\r\n                            this._running = false;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        } finally {\r\n            this._logger.log(LogLevel.Trace, \"(LongPolling transport) Polling complete.\");\r\n\r\n            // We will reach here with pollAborted==false when the server returned a response causing the transport to stop.\r\n            // If pollAborted==true then client initiated the stop and the stop method will raise the close event after DELETE is sent.\r\n            if (!this.pollAborted) {\r\n                this._raiseOnClose();\r\n            }\r\n        }\r\n    }\r\n\r\n    public async send(data: any): Promise<void> {\r\n        if (!this._running) {\r\n            return Promise.reject(new Error(\"Cannot send until the transport is connected\"));\r\n        }\r\n        return sendMessage(this._logger, \"LongPolling\", this._httpClient, this._url!, data, this._options);\r\n    }\r\n\r\n    public async stop(): Promise<void> {\r\n        this._logger.log(LogLevel.Trace, \"(LongPolling transport) Stopping polling.\");\r\n\r\n        // Tell receiving loop to stop, abort any current request, and then wait for it to finish\r\n        this._running = false;\r\n        this._pollAbort.abort();\r\n\r\n        try {\r\n            await this._receiving;\r\n\r\n            // Send DELETE to clean up long polling on the server\r\n            this._logger.log(LogLevel.Trace, `(LongPolling transport) sending DELETE request to ${this._url}.`);\r\n\r\n            const headers: {[k: string]: string} = {};\r\n            const [name, value] = getUserAgentHeader();\r\n            headers[name] = value;\r\n\r\n            const deleteOptions: HttpRequest = {\r\n                headers: { ...headers, ...this._options.headers },\r\n                timeout: this._options.timeout,\r\n                withCredentials: this._options.withCredentials,\r\n            };\r\n\r\n            let error;\r\n            try {\r\n                await this._httpClient.delete(this._url!, deleteOptions);\r\n            } catch (err) {\r\n                error = err;\r\n            }\r\n\r\n            if (error) {\r\n                if (error instanceof HttpError) {\r\n                    if (error.statusCode === 404) {\r\n                        this._logger.log(LogLevel.Trace, \"(LongPolling transport) A 404 response was returned from sending a DELETE request.\");\r\n                    } else {\r\n                        this._logger.log(LogLevel.Trace, `(LongPolling transport) Error sending a DELETE request: ${error}`);\r\n                    }\r\n                }\r\n            } else {\r\n                this._logger.log(LogLevel.Trace, \"(LongPolling transport) DELETE request accepted.\");\r\n            }\r\n\r\n        } finally {\r\n            this._logger.log(LogLevel.Trace, \"(LongPolling transport) Stop finished.\");\r\n\r\n            // Raise close event here instead of in polling\r\n            // It needs to happen after the DELETE request is sent\r\n            this._raiseOnClose();\r\n        }\r\n    }\r\n\r\n    private _raiseOnClose() {\r\n        if (this.onclose) {\r\n            let logMessage = \"(LongPolling transport) Firing onclose event.\";\r\n            if (this._closeError) {\r\n                logMessage += \" Error: \" + this._closeError;\r\n            }\r\n            this._logger.log(LogLevel.Trace, logMessage);\r\n            this.onclose(this._closeError);\r\n        }\r\n    }\r\n}\r\n","// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\n\r\nimport { HttpClient } from \"./HttpClient\";\r\nimport { MessageHeaders } from \"./IHubProtocol\";\r\nimport { ILogger, LogLevel } from \"./ILogger\";\r\nimport { ITransport, TransferFormat } from \"./ITransport\";\r\nimport { Arg, getDataDetail, getUserAgentHeader, Platform, sendMessage } from \"./Utils\";\r\nimport { IHttpConnectionOptions } from \"./IHttpConnectionOptions\";\r\n\r\n/** @private */\r\nexport class ServerSentEventsTransport implements ITransport {\r\n    private readonly _httpClient: HttpClient;\r\n    private readonly _accessToken: string | undefined;\r\n    private readonly _logger: ILogger;\r\n    private readonly _options: IHttpConnectionOptions;\r\n    private _eventSource?: EventSource;\r\n    private _url?: string;\r\n\r\n    public onreceive: ((data: string | ArrayBuffer) => void) | null;\r\n    public onclose: ((error?: Error | unknown) => void) | null;\r\n\r\n    constructor(httpClient: HttpClient, accessToken: string | undefined, logger: ILogger,\r\n                options: IHttpConnectionOptions) {\r\n        this._httpClient = httpClient;\r\n        this._accessToken = accessToken;\r\n        this._logger = logger;\r\n        this._options = options;\r\n\r\n        this.onreceive = null;\r\n        this.onclose = null;\r\n    }\r\n\r\n    public async connect(url: string, transferFormat: TransferFormat): Promise<void> {\r\n        Arg.isRequired(url, \"url\");\r\n        Arg.isRequired(transferFormat, \"transferFormat\");\r\n        Arg.isIn(transferFormat, TransferFormat, \"transferFormat\");\r\n\r\n        this._logger.log(LogLevel.Trace, \"(SSE transport) Connecting.\");\r\n\r\n        // set url before accessTokenFactory because this._url is only for send and we set the auth header instead of the query string for send\r\n        this._url = url;\r\n\r\n        if (this._accessToken) {\r\n            url += (url.indexOf(\"?\") < 0 ? \"?\" : \"&\") + `access_token=${encodeURIComponent(this._accessToken)}`;\r\n        }\r\n\r\n        return new Promise<void>((resolve, reject) => {\r\n            let opened = false;\r\n            if (transferFormat !== TransferFormat.Text) {\r\n                reject(new Error(\"The Server-Sent Events transport only supports the 'Text' transfer format\"));\r\n                return;\r\n            }\r\n\r\n            let eventSource: EventSource;\r\n            if (Platform.isBrowser || Platform.isWebWorker) {\r\n                eventSource = new this._options.EventSource!(url, { withCredentials: this._options.withCredentials });\r\n            } else {\r\n                // Non-browser passes cookies via the dictionary\r\n                const cookies = this._httpClient.getCookieString(url);\r\n                const headers: MessageHeaders = {};\r\n                headers.Cookie = cookies;\r\n                const [name, value] = getUserAgentHeader();\r\n                headers[name] = value;\r\n\r\n                eventSource = new this._options.EventSource!(url, { withCredentials: this._options.withCredentials, headers: { ...headers, ...this._options.headers} } as EventSourceInit);\r\n            }\r\n\r\n            try {\r\n                eventSource.onmessage = (e: MessageEvent) => {\r\n                    if (this.onreceive) {\r\n                        try {\r\n                            this._logger.log(LogLevel.Trace, `(SSE transport) data received. ${getDataDetail(e.data, this._options.logMessageContent!)}.`);\r\n                            this.onreceive(e.data);\r\n                        } catch (error) {\r\n                            this._close(error);\r\n                            return;\r\n                        }\r\n                    }\r\n                };\r\n\r\n                // @ts-ignore: not using event on purpose\r\n                eventSource.onerror = (e: Event) => {\r\n                    // EventSource doesn't give any useful information about server side closes.\r\n                    if (opened) {\r\n                        this._close();\r\n                    } else {\r\n                        reject(new Error(\"EventSource failed to connect. The connection could not be found on the server,\"\r\n                        + \" either the connection ID is not present on the server, or a proxy is refusing/buffering the connection.\"\r\n                        + \" If you have multiple servers check that sticky sessions are enabled.\"));\r\n                    }\r\n                };\r\n\r\n                eventSource.onopen = () => {\r\n                    this._logger.log(LogLevel.Information, `SSE connected to ${this._url}`);\r\n                    this._eventSource = eventSource;\r\n                    opened = true;\r\n                    resolve();\r\n                };\r\n            } catch (e) {\r\n                reject(e);\r\n                return;\r\n            }\r\n        });\r\n    }\r\n\r\n    public async send(data: any): Promise<void> {\r\n        if (!this._eventSource) {\r\n            return Promise.reject(new Error(\"Cannot send until the transport is connected\"));\r\n        }\r\n        return sendMessage(this._logger, \"SSE\", this._httpClient, this._url!, data, this._options);\r\n    }\r\n\r\n    public stop(): Promise<void> {\r\n        this._close();\r\n        return Promise.resolve();\r\n    }\r\n\r\n    private _close(e?: Error | unknown) {\r\n        if (this._eventSource) {\r\n            this._eventSource.close();\r\n            this._eventSource = undefined;\r\n\r\n            if (this.onclose) {\r\n                this.onclose(e);\r\n            }\r\n        }\r\n    }\r\n}\r\n","// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\n\r\nimport { HeaderNames } from \"./HeaderNames\";\r\nimport { HttpClient } from \"./HttpClient\";\r\nimport { MessageHeaders } from \"./IHubProtocol\";\r\nimport { ILogger, LogLevel } from \"./ILogger\";\r\nimport { ITransport, TransferFormat } from \"./ITransport\";\r\nimport { WebSocketConstructor } from \"./Polyfills\";\r\nimport { Arg, getDataDetail, getUserAgentHeader, Platform } from \"./Utils\";\r\n\r\n/** @private */\r\nexport class WebSocketTransport implements ITransport {\r\n    private readonly _logger: ILogger;\r\n    private readonly _accessTokenFactory: (() => string | Promise<string>) | undefined;\r\n    private readonly _logMessageContent: boolean;\r\n    private readonly _webSocketConstructor: WebSocketConstructor;\r\n    private readonly _httpClient: HttpClient;\r\n    private _webSocket?: WebSocket;\r\n    private _headers: MessageHeaders;\r\n\r\n    public onreceive: ((data: string | ArrayBuffer) => void) | null;\r\n    public onclose: ((error?: Error) => void) | null;\r\n\r\n    constructor(httpClient: HttpClient, accessTokenFactory: (() => string | Promise<string>) | undefined, logger: ILogger,\r\n                logMessageContent: boolean, webSocketConstructor: WebSocketConstructor, headers: MessageHeaders) {\r\n        this._logger = logger;\r\n        this._accessTokenFactory = accessTokenFactory;\r\n        this._logMessageContent = logMessageContent;\r\n        this._webSocketConstructor = webSocketConstructor;\r\n        this._httpClient = httpClient;\r\n\r\n        this.onreceive = null;\r\n        this.onclose = null;\r\n        this._headers = headers;\r\n    }\r\n\r\n    public async connect(url: string, transferFormat: TransferFormat): Promise<void> {\r\n        Arg.isRequired(url, \"url\");\r\n        Arg.isRequired(transferFormat, \"transferFormat\");\r\n        Arg.isIn(transferFormat, TransferFormat, \"transferFormat\");\r\n        this._logger.log(LogLevel.Trace, \"(WebSockets transport) Connecting.\");\r\n\r\n        let token: string;\r\n        if (this._accessTokenFactory) {\r\n            token = await this._accessTokenFactory();\r\n        }\r\n\r\n        return new Promise<void>((resolve, reject) => {\r\n            url = url.replace(/^http/, \"ws\");\r\n            let webSocket: WebSocket | undefined;\r\n            const cookies = this._httpClient.getCookieString(url);\r\n            let opened = false;\r\n\r\n            if (Platform.isNode || Platform.isReactNative) {\r\n                const headers: {[k: string]: string} = {};\r\n                const [name, value] = getUserAgentHeader();\r\n                headers[name] = value;\r\n                if (token) {\r\n                    headers[HeaderNames.Authorization] = `Bearer ${token}`;\r\n                }\r\n\r\n                if (cookies) {\r\n                    headers[HeaderNames.Cookie] = cookies;\r\n                }\r\n\r\n                // Only pass headers when in non-browser environments\r\n                webSocket = new this._webSocketConstructor(url, undefined, {\r\n                    headers: { ...headers, ...this._headers },\r\n                });\r\n            }\r\n            else\r\n            {\r\n                if (token) {\r\n                    url += (url.indexOf(\"?\") < 0 ? \"?\" : \"&\") + `access_token=${encodeURIComponent(token)}`;\r\n                }\r\n            }\r\n\r\n            if (!webSocket) {\r\n                // Chrome is not happy with passing 'undefined' as protocol\r\n                webSocket = new this._webSocketConstructor(url);\r\n            }\r\n\r\n            if (transferFormat === TransferFormat.Binary) {\r\n                webSocket.binaryType = \"arraybuffer\";\r\n            }\r\n\r\n            webSocket.onopen = (_event: Event) => {\r\n                this._logger.log(LogLevel.Information, `WebSocket connected to ${url}.`);\r\n                this._webSocket = webSocket;\r\n                opened = true;\r\n                resolve();\r\n            };\r\n\r\n            webSocket.onerror = (event: Event) => {\r\n                let error: any = null;\r\n                // ErrorEvent is a browser only type we need to check if the type exists before using it\r\n                if (typeof ErrorEvent !== \"undefined\" && event instanceof ErrorEvent) {\r\n                    error = event.error;\r\n                } else {\r\n                    error = \"There was an error with the transport\";\r\n                }\r\n\r\n                this._logger.log(LogLevel.Information, `(WebSockets transport) ${error}.`);\r\n            };\r\n\r\n            webSocket.onmessage = (message: MessageEvent) => {\r\n                this._logger.log(LogLevel.Trace, `(WebSockets transport) data received. ${getDataDetail(message.data, this._logMessageContent)}.`);\r\n                if (this.onreceive) {\r\n                    try {\r\n                        this.onreceive(message.data);\r\n                    } catch (error) {\r\n                        this._close(error);\r\n                        return;\r\n                    }\r\n                }\r\n            };\r\n\r\n            webSocket.onclose = (event: CloseEvent) => {\r\n                // Don't call close handler if connection was never established\r\n                // We'll reject the connect call instead\r\n                if (opened) {\r\n                    this._close(event);\r\n                } else {\r\n                    let error: any = null;\r\n                    // ErrorEvent is a browser only type we need to check if the type exists before using it\r\n                    if (typeof ErrorEvent !== \"undefined\" && event instanceof ErrorEvent) {\r\n                        error = event.error;\r\n                    } else {\r\n                        error = \"WebSocket failed to connect. The connection could not be found on the server,\"\r\n                        + \" either the endpoint may not be a SignalR endpoint,\"\r\n                        + \" the connection ID is not present on the server, or there is a proxy blocking WebSockets.\"\r\n                        + \" If you have multiple servers check that sticky sessions are enabled.\";\r\n                    }\r\n\r\n                    reject(new Error(error));\r\n                }\r\n            };\r\n        });\r\n    }\r\n\r\n    public send(data: any): Promise<void> {\r\n        if (this._webSocket && this._webSocket.readyState === this._webSocketConstructor.OPEN) {\r\n            this._logger.log(LogLevel.Trace, `(WebSockets transport) sending data. ${getDataDetail(data, this._logMessageContent)}.`);\r\n            this._webSocket.send(data);\r\n            return Promise.resolve();\r\n        }\r\n\r\n        return Promise.reject(\"WebSocket is not in the OPEN state\");\r\n    }\r\n\r\n    public stop(): Promise<void> {\r\n        if (this._webSocket) {\r\n            // Manually invoke onclose callback inline so we know the HttpConnection was closed properly before returning\r\n            // This also solves an issue where websocket.onclose could take 18+ seconds to trigger during network disconnects\r\n            this._close(undefined);\r\n        }\r\n\r\n        return Promise.resolve();\r\n    }\r\n\r\n    private _close(event: CloseEvent | Error | unknown): void {\r\n        // webSocket will be null if the transport did not start successfully\r\n        if (this._webSocket) {\r\n            // Clear websocket handlers because we are considering the socket closed now\r\n            this._webSocket.onclose = () => {};\r\n            this._webSocket.onmessage = () => {};\r\n            this._webSocket.onerror = () => {};\r\n            this._webSocket.close();\r\n            this._webSocket = undefined;\r\n        }\r\n\r\n        this._logger.log(LogLevel.Trace, \"(WebSockets transport) socket closed.\");\r\n\r\n        if (this.onclose) {\r\n            if (this._isCloseEvent(event) && (event.wasClean === false || event.code !== 1000)) {\r\n                this.onclose(new Error(`WebSocket closed with status code: ${event.code} (${event.reason || \"no reason given\"}).`));\r\n            } else if (event instanceof Error) {\r\n                this.onclose(event);\r\n            } else {\r\n                this.onclose();\r\n            }\r\n        }\r\n    }\r\n\r\n    private _isCloseEvent(event?: any): event is CloseEvent {\r\n        return event && typeof event.wasClean === \"boolean\" && typeof event.code === \"number\";\r\n    }\r\n}\r\n","// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\n\r\nimport { AccessTokenHttpClient } from \"./AccessTokenHttpClient\";\r\nimport { DefaultHttpClient } from \"./DefaultHttpClient\";\r\nimport { AggregateErrors, DisabledTransportError, FailedToNegotiateWithServerError, FailedToStartTransportError, HttpError, UnsupportedTransportError, AbortError } from \"./Errors\";\r\nimport { IConnection } from \"./IConnection\";\r\nimport { IHttpConnectionOptions } from \"./IHttpConnectionOptions\";\r\nimport { ILogger, LogLevel } from \"./ILogger\";\r\nimport { HttpTransportType, ITransport, TransferFormat } from \"./ITransport\";\r\nimport { LongPollingTransport } from \"./LongPollingTransport\";\r\nimport { ServerSentEventsTransport } from \"./ServerSentEventsTransport\";\r\nimport { Arg, createLogger, getUserAgentHeader, Platform } from \"./Utils\";\r\nimport { WebSocketTransport } from \"./WebSocketTransport\";\r\n\r\n/** @private */\r\nconst enum ConnectionState {\r\n    Connecting = \"Connecting\",\r\n    Connected = \"Connected\",\r\n    Disconnected = \"Disconnected\",\r\n    Disconnecting = \"Disconnecting\",\r\n}\r\n\r\n/** @private */\r\nexport interface INegotiateResponse {\r\n    connectionId?: string;\r\n    connectionToken?: string;\r\n    negotiateVersion?: number;\r\n    availableTransports?: IAvailableTransport[];\r\n    url?: string;\r\n    accessToken?: string;\r\n    error?: string;\r\n    useStatefulReconnect?: boolean;\r\n}\r\n\r\n/** @private */\r\nexport interface IAvailableTransport {\r\n    transport: keyof typeof HttpTransportType;\r\n    transferFormats: (keyof typeof TransferFormat)[];\r\n}\r\n\r\nconst MAX_REDIRECTS = 100;\r\n\r\n/** @private */\r\nexport class HttpConnection implements IConnection {\r\n    private _connectionState: ConnectionState;\r\n    // connectionStarted is tracked independently from connectionState, so we can check if the\r\n    // connection ever did successfully transition from connecting to connected before disconnecting.\r\n    private _connectionStarted: boolean;\r\n    private readonly _httpClient: AccessTokenHttpClient;\r\n    private readonly _logger: ILogger;\r\n    private readonly _options: IHttpConnectionOptions;\r\n    // Needs to not start with _ to be available for tests\r\n    // eslint-disable-next-line @typescript-eslint/naming-convention\r\n    private transport?: ITransport;\r\n    private _startInternalPromise?: Promise<void>;\r\n    private _stopPromise?: Promise<void>;\r\n    private _stopPromiseResolver: (value?: PromiseLike<void>) => void = () => {};\r\n    private _stopError?: Error;\r\n    private _accessTokenFactory?: () => string | Promise<string>;\r\n    private _sendQueue?: TransportSendQueue;\r\n\r\n    public readonly features: any = {};\r\n    public baseUrl: string;\r\n    public connectionId?: string;\r\n    public onreceive: ((data: string | ArrayBuffer) => void) | null;\r\n    public onclose: ((e?: Error) => void) | null;\r\n\r\n    private readonly _negotiateVersion: number = 1;\r\n\r\n    constructor(url: string, options: IHttpConnectionOptions = {}) {\r\n        Arg.isRequired(url, \"url\");\r\n\r\n        this._logger = createLogger(options.logger);\r\n        this.baseUrl = this._resolveUrl(url);\r\n\r\n        options = options || {};\r\n        options.logMessageContent = options.logMessageContent === undefined ? false : options.logMessageContent;\r\n        if (typeof options.withCredentials === \"boolean\" || options.withCredentials === undefined) {\r\n            options.withCredentials = options.withCredentials === undefined ? true : options.withCredentials;\r\n        } else {\r\n            throw new Error(\"withCredentials option was not a 'boolean' or 'undefined' value\");\r\n        }\r\n        options.timeout = options.timeout === undefined ? 100 * 1000 : options.timeout;\r\n\r\n        let webSocketModule: any = null;\r\n        let eventSourceModule: any = null;\r\n\r\n        if (Platform.isNode && typeof require !== \"undefined\") {\r\n            // In order to ignore the dynamic require in webpack builds we need to do this magic\r\n            // @ts-ignore: TS doesn't know about these names\r\n            const requireFunc = typeof __webpack_require__ === \"function\" ? __non_webpack_require__ : require;\r\n            webSocketModule = requireFunc(\"ws\");\r\n            eventSourceModule = requireFunc(\"eventsource\");\r\n        }\r\n\r\n        if (!Platform.isNode && typeof WebSocket !== \"undefined\" && !options.WebSocket) {\r\n            options.WebSocket = WebSocket;\r\n        } else if (Platform.isNode && !options.WebSocket) {\r\n            if (webSocketModule) {\r\n                options.WebSocket = webSocketModule;\r\n            }\r\n        }\r\n\r\n        if (!Platform.isNode && typeof EventSource !== \"undefined\" && !options.EventSource) {\r\n            options.EventSource = EventSource;\r\n        } else if (Platform.isNode && !options.EventSource) {\r\n            if (typeof eventSourceModule !== \"undefined\") {\r\n                options.EventSource = eventSourceModule;\r\n            }\r\n        }\r\n\r\n        this._httpClient = new AccessTokenHttpClient(options.httpClient || new DefaultHttpClient(this._logger), options.accessTokenFactory);\r\n        this._connectionState = ConnectionState.Disconnected;\r\n        this._connectionStarted = false;\r\n        this._options = options;\r\n\r\n        this.onreceive = null;\r\n        this.onclose = null;\r\n    }\r\n\r\n    public start(): Promise<void>;\r\n    public start(transferFormat: TransferFormat): Promise<void>;\r\n    public async start(transferFormat?: TransferFormat): Promise<void> {\r\n        transferFormat = transferFormat || TransferFormat.Binary;\r\n\r\n        Arg.isIn(transferFormat, TransferFormat, \"transferFormat\");\r\n\r\n        this._logger.log(LogLevel.Debug, `Starting connection with transfer format '${TransferFormat[transferFormat]}'.`);\r\n\r\n        if (this._connectionState !== ConnectionState.Disconnected) {\r\n            return Promise.reject(new Error(\"Cannot start an HttpConnection that is not in the 'Disconnected' state.\"));\r\n        }\r\n\r\n        this._connectionState = ConnectionState.Connecting;\r\n\r\n        this._startInternalPromise = this._startInternal(transferFormat);\r\n        await this._startInternalPromise;\r\n\r\n        // The TypeScript compiler thinks that connectionState must be Connecting here. The TypeScript compiler is wrong.\r\n        if (this._connectionState as any === ConnectionState.Disconnecting) {\r\n            // stop() was called and transitioned the client into the Disconnecting state.\r\n            const message = \"Failed to start the HttpConnection before stop() was called.\";\r\n            this._logger.log(LogLevel.Error, message);\r\n\r\n            // We cannot await stopPromise inside startInternal since stopInternal awaits the startInternalPromise.\r\n            await this._stopPromise;\r\n\r\n            return Promise.reject(new AbortError(message));\r\n        } else if (this._connectionState as any !== ConnectionState.Connected) {\r\n            // stop() was called and transitioned the client into the Disconnecting state.\r\n            const message = \"HttpConnection.startInternal completed gracefully but didn't enter the connection into the connected state!\";\r\n            this._logger.log(LogLevel.Error, message);\r\n            return Promise.reject(new AbortError(message));\r\n        }\r\n\r\n        this._connectionStarted = true;\r\n    }\r\n\r\n    public send(data: string | ArrayBuffer): Promise<void> {\r\n        if (this._connectionState !== ConnectionState.Connected) {\r\n            return Promise.reject(new Error(\"Cannot send data if the connection is not in the 'Connected' State.\"));\r\n        }\r\n\r\n        if (!this._sendQueue) {\r\n            this._sendQueue = new TransportSendQueue(this.transport!);\r\n        }\r\n\r\n        // Transport will not be null if state is connected\r\n        return this._sendQueue.send(data);\r\n    }\r\n\r\n    public async stop(error?: Error): Promise<void> {\r\n        if (this._connectionState === ConnectionState.Disconnected) {\r\n            this._logger.log(LogLevel.Debug, `Call to HttpConnection.stop(${error}) ignored because the connection is already in the disconnected state.`);\r\n            return Promise.resolve();\r\n        }\r\n\r\n        if (this._connectionState === ConnectionState.Disconnecting) {\r\n            this._logger.log(LogLevel.Debug, `Call to HttpConnection.stop(${error}) ignored because the connection is already in the disconnecting state.`);\r\n            return this._stopPromise;\r\n        }\r\n\r\n        this._connectionState = ConnectionState.Disconnecting;\r\n\r\n        this._stopPromise = new Promise((resolve) => {\r\n            // Don't complete stop() until stopConnection() completes.\r\n            this._stopPromiseResolver = resolve;\r\n        });\r\n\r\n        // stopInternal should never throw so just observe it.\r\n        await this._stopInternal(error);\r\n        await this._stopPromise;\r\n    }\r\n\r\n    private async _stopInternal(error?: Error): Promise<void> {\r\n        // Set error as soon as possible otherwise there is a race between\r\n        // the transport closing and providing an error and the error from a close message\r\n        // We would prefer the close message error.\r\n        this._stopError = error;\r\n\r\n        try {\r\n            await this._startInternalPromise;\r\n        } catch (e) {\r\n            // This exception is returned to the user as a rejected Promise from the start method.\r\n        }\r\n\r\n        // The transport's onclose will trigger stopConnection which will run our onclose event.\r\n        // The transport should always be set if currently connected. If it wasn't set, it's likely because\r\n        // stop was called during start() and start() failed.\r\n        if (this.transport) {\r\n            try {\r\n                await this.transport.stop();\r\n            } catch (e) {\r\n                this._logger.log(LogLevel.Error, `HttpConnection.transport.stop() threw error '${e}'.`);\r\n                this._stopConnection();\r\n            }\r\n\r\n            this.transport = undefined;\r\n        } else {\r\n            this._logger.log(LogLevel.Debug, \"HttpConnection.transport is undefined in HttpConnection.stop() because start() failed.\");\r\n        }\r\n    }\r\n\r\n    private async _startInternal(transferFormat: TransferFormat): Promise<void> {\r\n        // Store the original base url and the access token factory since they may change\r\n        // as part of negotiating\r\n        let url = this.baseUrl;\r\n        this._accessTokenFactory = this._options.accessTokenFactory;\r\n        this._httpClient._accessTokenFactory = this._accessTokenFactory;\r\n\r\n        try {\r\n            if (this._options.skipNegotiation) {\r\n                if (this._options.transport === HttpTransportType.WebSockets) {\r\n                    // No need to add a connection ID in this case\r\n                    this.transport = this._constructTransport(HttpTransportType.WebSockets);\r\n                    // We should just call connect directly in this case.\r\n                    // No fallback or negotiate in this case.\r\n                    await this._startTransport(url, transferFormat);\r\n                } else {\r\n                    throw new Error(\"Negotiation can only be skipped when using the WebSocket transport directly.\");\r\n                }\r\n            } else {\r\n                let negotiateResponse: INegotiateResponse | null = null;\r\n                let redirects = 0;\r\n\r\n                do {\r\n                    negotiateResponse = await this._getNegotiationResponse(url);\r\n                    // the user tries to stop the connection when it is being started\r\n                    if (this._connectionState === ConnectionState.Disconnecting || this._connectionState === ConnectionState.Disconnected) {\r\n                        throw new AbortError(\"The connection was stopped during negotiation.\");\r\n                    }\r\n\r\n                    if (negotiateResponse.error) {\r\n                        throw new Error(negotiateResponse.error);\r\n                    }\r\n\r\n                    if ((negotiateResponse as any).ProtocolVersion) {\r\n                        throw new Error(\"Detected a connection attempt to an ASP.NET SignalR Server. This client only supports connecting to an ASP.NET Core SignalR Server. See https://aka.ms/signalr-core-differences for details.\");\r\n                    }\r\n\r\n                    if (negotiateResponse.url) {\r\n                        url = negotiateResponse.url;\r\n                    }\r\n\r\n                    if (negotiateResponse.accessToken) {\r\n                        // Replace the current access token factory with one that uses\r\n                        // the returned access token\r\n                        const accessToken = negotiateResponse.accessToken;\r\n                        this._accessTokenFactory = () => accessToken;\r\n                        // set the factory to undefined so the AccessTokenHttpClient won't retry with the same token, since we know it won't change until a connection restart\r\n                        this._httpClient._accessToken = accessToken;\r\n                        this._httpClient._accessTokenFactory = undefined;\r\n                    }\r\n\r\n                    redirects++;\r\n                }\r\n                while (negotiateResponse.url && redirects < MAX_REDIRECTS);\r\n\r\n                if (redirects === MAX_REDIRECTS && negotiateResponse.url) {\r\n                    throw new Error(\"Negotiate redirection limit exceeded.\");\r\n                }\r\n\r\n                await this._createTransport(url, this._options.transport, negotiateResponse, transferFormat);\r\n            }\r\n\r\n            if (this.transport instanceof LongPollingTransport) {\r\n                this.features.inherentKeepAlive = true;\r\n            }\r\n\r\n            if (this._connectionState === ConnectionState.Connecting) {\r\n                // Ensure the connection transitions to the connected state prior to completing this.startInternalPromise.\r\n                // start() will handle the case when stop was called and startInternal exits still in the disconnecting state.\r\n                this._logger.log(LogLevel.Debug, \"The HttpConnection connected successfully.\");\r\n                this._connectionState = ConnectionState.Connected;\r\n            }\r\n\r\n            // stop() is waiting on us via this.startInternalPromise so keep this.transport around so it can clean up.\r\n            // This is the only case startInternal can exit in neither the connected nor disconnected state because stopConnection()\r\n            // will transition to the disconnected state. start() will wait for the transition using the stopPromise.\r\n        } catch (e) {\r\n            this._logger.log(LogLevel.Error, \"Failed to start the connection: \" + e);\r\n            this._connectionState = ConnectionState.Disconnected;\r\n            this.transport = undefined;\r\n\r\n            // if start fails, any active calls to stop assume that start will complete the stop promise\r\n            this._stopPromiseResolver();\r\n            return Promise.reject(e);\r\n        }\r\n    }\r\n\r\n    private async _getNegotiationResponse(url: string): Promise<INegotiateResponse> {\r\n        const headers: {[k: string]: string} = {};\r\n        const [name, value] = getUserAgentHeader();\r\n        headers[name] = value;\r\n\r\n        const negotiateUrl = this._resolveNegotiateUrl(url);\r\n        this._logger.log(LogLevel.Debug, `Sending negotiation request: ${negotiateUrl}.`);\r\n        try {\r\n            const response = await this._httpClient.post(negotiateUrl, {\r\n                content: \"\",\r\n                headers: { ...headers, ...this._options.headers },\r\n                timeout: this._options.timeout,\r\n                withCredentials: this._options.withCredentials,\r\n            });\r\n\r\n            if (response.statusCode !== 200) {\r\n                return Promise.reject(new Error(`Unexpected status code returned from negotiate '${response.statusCode}'`));\r\n            }\r\n\r\n            const negotiateResponse = JSON.parse(response.content as string) as INegotiateResponse;\r\n            if (!negotiateResponse.negotiateVersion || negotiateResponse.negotiateVersion < 1) {\r\n                // Negotiate version 0 doesn't use connectionToken\r\n                // So we set it equal to connectionId so all our logic can use connectionToken without being aware of the negotiate version\r\n                negotiateResponse.connectionToken = negotiateResponse.connectionId;\r\n            }\r\n\r\n            if (negotiateResponse.useStatefulReconnect && this._options._useStatefulReconnect !== true) {\r\n                return Promise.reject(new FailedToNegotiateWithServerError(\"Client didn't negotiate Stateful Reconnect but the server did.\"));\r\n            }\r\n\r\n            return negotiateResponse;\r\n        } catch (e) {\r\n            let errorMessage = \"Failed to complete negotiation with the server: \" + e;\r\n            if (e instanceof HttpError) {\r\n                if (e.statusCode === 404) {\r\n                    errorMessage = errorMessage + \" Either this is not a SignalR endpoint or there is a proxy blocking the connection.\";\r\n                }\r\n            }\r\n            this._logger.log(LogLevel.Error, errorMessage);\r\n\r\n            return Promise.reject(new FailedToNegotiateWithServerError(errorMessage));\r\n        }\r\n    }\r\n\r\n    private _createConnectUrl(url: string, connectionToken: string | null | undefined) {\r\n        if (!connectionToken) {\r\n            return url;\r\n        }\r\n\r\n        return url + (url.indexOf(\"?\") === -1 ? \"?\" : \"&\") + `id=${connectionToken}`;\r\n    }\r\n\r\n    private async _createTransport(url: string, requestedTransport: HttpTransportType | ITransport | undefined, negotiateResponse: INegotiateResponse, requestedTransferFormat: TransferFormat): Promise<void> {\r\n        let connectUrl = this._createConnectUrl(url, negotiateResponse.connectionToken);\r\n        if (this._isITransport(requestedTransport)) {\r\n            this._logger.log(LogLevel.Debug, \"Connection was provided an instance of ITransport, using that directly.\");\r\n            this.transport = requestedTransport;\r\n            await this._startTransport(connectUrl, requestedTransferFormat);\r\n\r\n            this.connectionId = negotiateResponse.connectionId;\r\n            return;\r\n        }\r\n\r\n        const transportExceptions: any[] = [];\r\n        const transports = negotiateResponse.availableTransports || [];\r\n        let negotiate: INegotiateResponse | undefined = negotiateResponse;\r\n        for (const endpoint of transports) {\r\n            const transportOrError = this._resolveTransportOrError(endpoint, requestedTransport, requestedTransferFormat,\r\n                negotiate?.useStatefulReconnect === true);\r\n            if (transportOrError instanceof Error) {\r\n                // Store the error and continue, we don't want to cause a re-negotiate in these cases\r\n                transportExceptions.push(`${endpoint.transport} failed:`);\r\n                transportExceptions.push(transportOrError);\r\n            } else if (this._isITransport(transportOrError)) {\r\n                this.transport = transportOrError;\r\n                if (!negotiate) {\r\n                    try {\r\n                        negotiate = await this._getNegotiationResponse(url);\r\n                    } catch (ex) {\r\n                        return Promise.reject(ex);\r\n                    }\r\n                    connectUrl = this._createConnectUrl(url, negotiate.connectionToken);\r\n                }\r\n                try {\r\n                    await this._startTransport(connectUrl, requestedTransferFormat);\r\n                    this.connectionId = negotiate.connectionId;\r\n                    return;\r\n                } catch (ex) {\r\n                    this._logger.log(LogLevel.Error, `Failed to start the transport '${endpoint.transport}': ${ex}`);\r\n                    negotiate = undefined;\r\n                    transportExceptions.push(new FailedToStartTransportError(`${endpoint.transport} failed: ${ex}`, HttpTransportType[endpoint.transport]));\r\n\r\n                    if (this._connectionState !== ConnectionState.Connecting) {\r\n                        const message = \"Failed to select transport before stop() was called.\";\r\n                        this._logger.log(LogLevel.Debug, message);\r\n                        return Promise.reject(new AbortError(message));\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        if (transportExceptions.length > 0) {\r\n            return Promise.reject(new AggregateErrors(`Unable to connect to the server with any of the available transports. ${transportExceptions.join(\" \")}`, transportExceptions));\r\n        }\r\n        return Promise.reject(new Error(\"None of the transports supported by the client are supported by the server.\"));\r\n    }\r\n\r\n    private _constructTransport(transport: HttpTransportType): ITransport {\r\n        switch (transport) {\r\n            case HttpTransportType.WebSockets:\r\n                if (!this._options.WebSocket) {\r\n                    throw new Error(\"'WebSocket' is not supported in your environment.\");\r\n                }\r\n                return new WebSocketTransport(this._httpClient, this._accessTokenFactory, this._logger, this._options.logMessageContent!,\r\n                    this._options.WebSocket, this._options.headers || {});\r\n            case HttpTransportType.ServerSentEvents:\r\n                if (!this._options.EventSource) {\r\n                    throw new Error(\"'EventSource' is not supported in your environment.\");\r\n                }\r\n                return new ServerSentEventsTransport(this._httpClient, this._httpClient._accessToken, this._logger, this._options);\r\n            case HttpTransportType.LongPolling:\r\n                return new LongPollingTransport(this._httpClient, this._logger, this._options);\r\n            default:\r\n                throw new Error(`Unknown transport: ${transport}.`);\r\n        }\r\n    }\r\n\r\n    private _startTransport(url: string, transferFormat: TransferFormat): Promise<void> {\r\n        this.transport!.onreceive = this.onreceive;\r\n        if (this.features.reconnect) {\r\n            this.transport!.onclose = async (e) => {\r\n                let callStop = false;\r\n                if (this.features.reconnect) {\r\n                    try {\r\n                        this.features.disconnected();\r\n                        await this.transport!.connect(url, transferFormat);\r\n                        await this.features.resend();\r\n                    } catch {\r\n                        callStop = true;\r\n                    }\r\n                } else {\r\n                    this._stopConnection(e);\r\n                    return;\r\n                }\r\n\r\n                if (callStop) {\r\n                    this._stopConnection(e);\r\n                }\r\n            };\r\n        } else {\r\n            this.transport!.onclose = (e) => this._stopConnection(e);\r\n        }\r\n        return this.transport!.connect(url, transferFormat);\r\n    }\r\n\r\n    private _resolveTransportOrError(endpoint: IAvailableTransport, requestedTransport: HttpTransportType | undefined,\r\n        requestedTransferFormat: TransferFormat, useStatefulReconnect: boolean): ITransport | Error | unknown {\r\n        const transport = HttpTransportType[endpoint.transport];\r\n        if (transport === null || transport === undefined) {\r\n            this._logger.log(LogLevel.Debug, `Skipping transport '${endpoint.transport}' because it is not supported by this client.`);\r\n            return new Error(`Skipping transport '${endpoint.transport}' because it is not supported by this client.`);\r\n        } else {\r\n            if (transportMatches(requestedTransport, transport)) {\r\n                const transferFormats = endpoint.transferFormats.map((s) => TransferFormat[s]);\r\n                if (transferFormats.indexOf(requestedTransferFormat) >= 0) {\r\n                    if ((transport === HttpTransportType.WebSockets && !this._options.WebSocket) ||\r\n                        (transport === HttpTransportType.ServerSentEvents && !this._options.EventSource)) {\r\n                        this._logger.log(LogLevel.Debug, `Skipping transport '${HttpTransportType[transport]}' because it is not supported in your environment.'`);\r\n                        return new UnsupportedTransportError(`'${HttpTransportType[transport]}' is not supported in your environment.`, transport);\r\n                    } else {\r\n                        this._logger.log(LogLevel.Debug, `Selecting transport '${HttpTransportType[transport]}'.`);\r\n                        try {\r\n                            this.features.reconnect = transport === HttpTransportType.WebSockets ? useStatefulReconnect : undefined;\r\n                            return this._constructTransport(transport);\r\n                        } catch (ex) {\r\n                            return ex;\r\n                        }\r\n                    }\r\n                } else {\r\n                    this._logger.log(LogLevel.Debug, `Skipping transport '${HttpTransportType[transport]}' because it does not support the requested transfer format '${TransferFormat[requestedTransferFormat]}'.`);\r\n                    return new Error(`'${HttpTransportType[transport]}' does not support ${TransferFormat[requestedTransferFormat]}.`);\r\n                }\r\n            } else {\r\n                this._logger.log(LogLevel.Debug, `Skipping transport '${HttpTransportType[transport]}' because it was disabled by the client.`);\r\n                return new DisabledTransportError(`'${HttpTransportType[transport]}' is disabled by the client.`, transport);\r\n            }\r\n        }\r\n    }\r\n\r\n    private _isITransport(transport: any): transport is ITransport {\r\n        return transport && typeof (transport) === \"object\" && \"connect\" in transport;\r\n    }\r\n\r\n    private _stopConnection(error?: Error): void {\r\n        this._logger.log(LogLevel.Debug, `HttpConnection.stopConnection(${error}) called while in state ${this._connectionState}.`);\r\n\r\n        this.transport = undefined;\r\n\r\n        // If we have a stopError, it takes precedence over the error from the transport\r\n        error = this._stopError || error;\r\n        this._stopError = undefined;\r\n\r\n        if (this._connectionState === ConnectionState.Disconnected) {\r\n            this._logger.log(LogLevel.Debug, `Call to HttpConnection.stopConnection(${error}) was ignored because the connection is already in the disconnected state.`);\r\n            return;\r\n        }\r\n\r\n        if (this._connectionState === ConnectionState.Connecting) {\r\n            this._logger.log(LogLevel.Warning, `Call to HttpConnection.stopConnection(${error}) was ignored because the connection is still in the connecting state.`);\r\n            throw new Error(`HttpConnection.stopConnection(${error}) was called while the connection is still in the connecting state.`);\r\n        }\r\n\r\n        if (this._connectionState === ConnectionState.Disconnecting) {\r\n            // A call to stop() induced this call to stopConnection and needs to be completed.\r\n            // Any stop() awaiters will be scheduled to continue after the onclose callback fires.\r\n            this._stopPromiseResolver();\r\n        }\r\n\r\n        if (error) {\r\n            this._logger.log(LogLevel.Error, `Connection disconnected with error '${error}'.`);\r\n        } else {\r\n            this._logger.log(LogLevel.Information, \"Connection disconnected.\");\r\n        }\r\n\r\n        if (this._sendQueue) {\r\n            this._sendQueue.stop().catch((e) => {\r\n                this._logger.log(LogLevel.Error, `TransportSendQueue.stop() threw error '${e}'.`);\r\n            });\r\n            this._sendQueue = undefined;\r\n        }\r\n\r\n        this.connectionId = undefined;\r\n        this._connectionState = ConnectionState.Disconnected;\r\n\r\n        if (this._connectionStarted) {\r\n            this._connectionStarted = false;\r\n            try {\r\n                if (this.onclose) {\r\n                    this.onclose(error);\r\n                }\r\n            } catch (e) {\r\n                this._logger.log(LogLevel.Error, `HttpConnection.onclose(${error}) threw error '${e}'.`);\r\n            }\r\n        }\r\n    }\r\n\r\n    private _resolveUrl(url: string): string {\r\n        // startsWith is not supported in IE\r\n        if (url.lastIndexOf(\"https://\", 0) === 0 || url.lastIndexOf(\"http://\", 0) === 0) {\r\n            return url;\r\n        }\r\n\r\n        if (!Platform.isBrowser) {\r\n            throw new Error(`Cannot resolve '${url}'.`);\r\n        }\r\n\r\n        // Setting the url to the href propery of an anchor tag handles normalization\r\n        // for us. There are 3 main cases.\r\n        // 1. Relative path normalization e.g \"b\" -> \"http://localhost:5000/a/b\"\r\n        // 2. Absolute path normalization e.g \"/a/b\" -> \"http://localhost:5000/a/b\"\r\n        // 3. Networkpath reference normalization e.g \"//localhost:5000/a/b\" -> \"http://localhost:5000/a/b\"\r\n        const aTag = window.document.createElement(\"a\");\r\n        aTag.href = url;\r\n\r\n        this._logger.log(LogLevel.Information, `Normalizing '${url}' to '${aTag.href}'.`);\r\n        return aTag.href;\r\n    }\r\n\r\n    private _resolveNegotiateUrl(url: string): string {\r\n        const negotiateUrl = new URL(url);\r\n\r\n        if (negotiateUrl.pathname.endsWith('/')) {\r\n            negotiateUrl.pathname += \"negotiate\";\r\n        } else {\r\n            negotiateUrl.pathname += \"/negotiate\";\r\n        }\r\n        const searchParams = new URLSearchParams(negotiateUrl.searchParams);\r\n\r\n        if (!searchParams.has(\"negotiateVersion\")) {\r\n            searchParams.append(\"negotiateVersion\", this._negotiateVersion.toString());\r\n        }\r\n\r\n        if (searchParams.has(\"useStatefulReconnect\")) {\r\n            if (searchParams.get(\"useStatefulReconnect\") === \"true\") {\r\n                this._options._useStatefulReconnect = true;\r\n            }\r\n        } else if (this._options._useStatefulReconnect === true) {\r\n            searchParams.append(\"useStatefulReconnect\", \"true\");\r\n        }\r\n\r\n        negotiateUrl.search = searchParams.toString();\r\n\r\n        return negotiateUrl.toString();\r\n    }\r\n}\r\n\r\nfunction transportMatches(requestedTransport: HttpTransportType | undefined, actualTransport: HttpTransportType) {\r\n    return !requestedTransport || ((actualTransport & requestedTransport) !== 0);\r\n}\r\n\r\n/** @private */\r\nexport class TransportSendQueue {\r\n    private _buffer: any[] = [];\r\n    private _sendBufferedData: PromiseSource;\r\n    private _executing: boolean = true;\r\n    private _transportResult?: PromiseSource;\r\n    private _sendLoopPromise: Promise<void>;\r\n\r\n    constructor(private readonly _transport: ITransport) {\r\n        this._sendBufferedData = new PromiseSource();\r\n        this._transportResult = new PromiseSource();\r\n\r\n        this._sendLoopPromise = this._sendLoop();\r\n    }\r\n\r\n    public send(data: string | ArrayBuffer): Promise<void> {\r\n        this._bufferData(data);\r\n        if (!this._transportResult) {\r\n            this._transportResult = new PromiseSource();\r\n        }\r\n        return this._transportResult.promise;\r\n    }\r\n\r\n    public stop(): Promise<void> {\r\n        this._executing = false;\r\n        this._sendBufferedData.resolve();\r\n        return this._sendLoopPromise;\r\n    }\r\n\r\n    private _bufferData(data: string | ArrayBuffer): void {\r\n        if (this._buffer.length && typeof(this._buffer[0]) !== typeof(data)) {\r\n            throw new Error(`Expected data to be of type ${typeof(this._buffer)} but was of type ${typeof(data)}`);\r\n        }\r\n\r\n        this._buffer.push(data);\r\n        this._sendBufferedData.resolve();\r\n    }\r\n\r\n    private async _sendLoop(): Promise<void> {\r\n        while (true) {\r\n            await this._sendBufferedData.promise;\r\n\r\n            if (!this._executing) {\r\n                if (this._transportResult) {\r\n                    this._transportResult.reject(\"Connection stopped.\");\r\n                }\r\n\r\n                break;\r\n            }\r\n\r\n            this._sendBufferedData = new PromiseSource();\r\n\r\n            const transportResult = this._transportResult!;\r\n            this._transportResult = undefined;\r\n\r\n            const data = typeof(this._buffer[0]) === \"string\" ?\r\n                this._buffer.join(\"\") :\r\n                TransportSendQueue._concatBuffers(this._buffer);\r\n\r\n            this._buffer.length = 0;\r\n\r\n            try {\r\n                await this._transport.send(data);\r\n                transportResult.resolve();\r\n            } catch (error) {\r\n                transportResult.reject(error);\r\n            }\r\n        }\r\n    }\r\n\r\n    private static _concatBuffers(arrayBuffers: ArrayBuffer[]): ArrayBuffer {\r\n        const totalLength = arrayBuffers.map((b) => b.byteLength).reduce((a, b) => a + b);\r\n        const result = new Uint8Array(totalLength);\r\n        let offset = 0;\r\n        for (const item of arrayBuffers) {\r\n            result.set(new Uint8Array(item), offset);\r\n            offset += item.byteLength;\r\n        }\r\n\r\n        return result.buffer;\r\n    }\r\n}\r\n\r\nclass PromiseSource {\r\n    private _resolver?: () => void;\r\n    private _rejecter!: (reason?: any) => void;\r\n    public promise: Promise<void>;\r\n\r\n    constructor() {\r\n        this.promise = new Promise((resolve, reject) => [this._resolver, this._rejecter] = [resolve, reject]);\r\n    }\r\n\r\n    public resolve(): void {\r\n        this._resolver!();\r\n    }\r\n\r\n    public reject(reason?: any): void {\r\n        this._rejecter!(reason);\r\n    }\r\n}\r\n","// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\n\r\n// Not exported from index\r\n/** @private */\r\nexport class TextMessageFormat {\r\n    public static RecordSeparatorCode = 0x1e;\r\n    public static RecordSeparator = String.fromCharCode(TextMessageFormat.RecordSeparatorCode);\r\n\r\n    public static write(output: string): string {\r\n        return `${output}${TextMessageFormat.RecordSeparator}`;\r\n    }\r\n\r\n    public static parse(input: string): string[] {\r\n        if (input[input.length - 1] !== TextMessageFormat.RecordSeparator) {\r\n            throw new Error(\"Message is incomplete.\");\r\n        }\r\n\r\n        const messages = input.split(TextMessageFormat.RecordSeparator);\r\n        messages.pop();\r\n        return messages;\r\n    }\r\n}\r\n","// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\n\r\nimport { TextMessageFormat } from \"./TextMessageFormat\";\r\nimport { isArrayBuffer } from \"./Utils\";\r\n\r\n/** @private */\r\nexport interface HandshakeRequestMessage {\r\n    readonly protocol: string;\r\n    readonly version: number;\r\n}\r\n\r\n/** @private */\r\nexport interface HandshakeResponseMessage {\r\n    readonly error: string;\r\n    readonly minorVersion: number;\r\n}\r\n\r\n/** @private */\r\nexport class HandshakeProtocol {\r\n    // Handshake request is always JSON\r\n    public writeHandshakeRequest(handshakeRequest: HandshakeRequestMessage): string {\r\n        return TextMessageFormat.write(JSON.stringify(handshakeRequest));\r\n    }\r\n\r\n    public parseHandshakeResponse(data: any): [any, HandshakeResponseMessage] {\r\n        let messageData: string;\r\n        let remainingData: any;\r\n\r\n        if (isArrayBuffer(data)) {\r\n            // Format is binary but still need to read JSON text from handshake response\r\n            const binaryData = new Uint8Array(data);\r\n            const separatorIndex = binaryData.indexOf(TextMessageFormat.RecordSeparatorCode);\r\n            if (separatorIndex === -1) {\r\n                throw new Error(\"Message is incomplete.\");\r\n            }\r\n\r\n            // content before separator is handshake response\r\n            // optional content after is additional messages\r\n            const responseLength = separatorIndex + 1;\r\n            messageData = String.fromCharCode.apply(null, Array.prototype.slice.call(binaryData.slice(0, responseLength)));\r\n            remainingData = (binaryData.byteLength > responseLength) ? binaryData.slice(responseLength).buffer : null;\r\n        } else {\r\n            const textData: string = data;\r\n            const separatorIndex = textData.indexOf(TextMessageFormat.RecordSeparator);\r\n            if (separatorIndex === -1) {\r\n                throw new Error(\"Message is incomplete.\");\r\n            }\r\n\r\n            // content before separator is handshake response\r\n            // optional content after is additional messages\r\n            const responseLength = separatorIndex + 1;\r\n            messageData = textData.substring(0, responseLength);\r\n            remainingData = (textData.length > responseLength) ? textData.substring(responseLength) : null;\r\n        }\r\n\r\n        // At this point we should have just the single handshake message\r\n        const messages = TextMessageFormat.parse(messageData);\r\n        const response = JSON.parse(messages[0]);\r\n        if (response.type) {\r\n            throw new Error(\"Expected a handshake response from the server.\");\r\n        }\r\n        const responseMessage: HandshakeResponseMessage = response;\r\n\r\n        // multiple messages could have arrived with handshake\r\n        // return additional data to be parsed as usual, or null if all parsed\r\n        return [remainingData, responseMessage];\r\n    }\r\n}\r\n","// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\n\r\nimport { ILogger } from \"./ILogger\";\r\nimport { TransferFormat } from \"./ITransport\";\r\n\r\n/** Defines the type of a Hub Message. */\r\nexport enum MessageType {\r\n    /** Indicates the message is an Invocation message and implements the {@link @microsoft/signalr.InvocationMessage} interface. */\r\n    Invocation = 1,\r\n    /** Indicates the message is a StreamItem message and implements the {@link @microsoft/signalr.StreamItemMessage} interface. */\r\n    StreamItem = 2,\r\n    /** Indicates the message is a Completion message and implements the {@link @microsoft/signalr.CompletionMessage} interface. */\r\n    Completion = 3,\r\n    /** Indicates the message is a Stream Invocation message and implements the {@link @microsoft/signalr.StreamInvocationMessage} interface. */\r\n    StreamInvocation = 4,\r\n    /** Indicates the message is a Cancel Invocation message and implements the {@link @microsoft/signalr.CancelInvocationMessage} interface. */\r\n    CancelInvocation = 5,\r\n    /** Indicates the message is a Ping message and implements the {@link @microsoft/signalr.PingMessage} interface. */\r\n    Ping = 6,\r\n    /** Indicates the message is a Close message and implements the {@link @microsoft/signalr.CloseMessage} interface. */\r\n    Close = 7,\r\n    Ack = 8,\r\n    Sequence = 9\r\n}\r\n\r\n/** Defines a dictionary of string keys and string values representing headers attached to a Hub message. */\r\nexport interface MessageHeaders {\r\n    /** Gets or sets the header with the specified key. */\r\n    [key: string]: string;\r\n}\r\n\r\n/** Union type of all known Hub messages. */\r\nexport type HubMessage =\r\n    InvocationMessage |\r\n    StreamInvocationMessage |\r\n    StreamItemMessage |\r\n    CompletionMessage |\r\n    CancelInvocationMessage |\r\n    PingMessage |\r\n    CloseMessage |\r\n    AckMessage |\r\n    SequenceMessage;\r\n\r\n/** Defines properties common to all Hub messages. */\r\nexport interface HubMessageBase {\r\n    /** A {@link @microsoft/signalr.MessageType} value indicating the type of this message. */\r\n    readonly type: MessageType;\r\n}\r\n\r\n/** Defines properties common to all Hub messages relating to a specific invocation. */\r\nexport interface HubInvocationMessage extends HubMessageBase {\r\n    /** A {@link @microsoft/signalr.MessageHeaders} dictionary containing headers attached to the message. */\r\n    readonly headers?: MessageHeaders;\r\n    /** The ID of the invocation relating to this message.\r\n     *\r\n     * This is expected to be present for {@link @microsoft/signalr.StreamInvocationMessage} and {@link @microsoft/signalr.CompletionMessage}. It may\r\n     * be 'undefined' for an {@link @microsoft/signalr.InvocationMessage} if the sender does not expect a response.\r\n     */\r\n    readonly invocationId?: string;\r\n}\r\n\r\n/** A hub message representing a non-streaming invocation. */\r\nexport interface InvocationMessage extends HubInvocationMessage {\r\n    /** @inheritDoc */\r\n    readonly type: MessageType.Invocation;\r\n    /** The target method name. */\r\n    readonly target: string;\r\n    /** The target method arguments. */\r\n    readonly arguments: any[];\r\n    /** The target methods stream IDs. */\r\n    readonly streamIds?: string[];\r\n}\r\n\r\n/** A hub message representing a streaming invocation. */\r\nexport interface StreamInvocationMessage extends HubInvocationMessage {\r\n    /** @inheritDoc */\r\n    readonly type: MessageType.StreamInvocation;\r\n\r\n    /** The invocation ID. */\r\n    readonly invocationId: string;\r\n    /** The target method name. */\r\n    readonly target: string;\r\n    /** The target method arguments. */\r\n    readonly arguments: any[];\r\n    /** The target methods stream IDs. */\r\n    readonly streamIds?: string[];\r\n}\r\n\r\n/** A hub message representing a single item produced as part of a result stream. */\r\nexport interface StreamItemMessage extends HubInvocationMessage {\r\n    /** @inheritDoc */\r\n    readonly type: MessageType.StreamItem;\r\n\r\n    /** The invocation ID. */\r\n    readonly invocationId: string;\r\n\r\n    /** The item produced by the server. */\r\n    readonly item?: any;\r\n}\r\n\r\n/** A hub message representing the result of an invocation. */\r\nexport interface CompletionMessage extends HubInvocationMessage {\r\n    /** @inheritDoc */\r\n    readonly type: MessageType.Completion;\r\n    /** The invocation ID. */\r\n    readonly invocationId: string;\r\n    /** The error produced by the invocation, if any.\r\n     *\r\n     * Either {@link @microsoft/signalr.CompletionMessage.error} or {@link @microsoft/signalr.CompletionMessage.result} must be defined, but not both.\r\n     */\r\n    readonly error?: string;\r\n    /** The result produced by the invocation, if any.\r\n     *\r\n     * Either {@link @microsoft/signalr.CompletionMessage.error} or {@link @microsoft/signalr.CompletionMessage.result} must be defined, but not both.\r\n     */\r\n    readonly result?: any;\r\n}\r\n\r\n/** A hub message indicating that the sender is still active. */\r\nexport interface PingMessage extends HubMessageBase {\r\n    /** @inheritDoc */\r\n    readonly type: MessageType.Ping;\r\n}\r\n\r\n/** A hub message indicating that the sender is closing the connection.\r\n *\r\n * If {@link @microsoft/signalr.CloseMessage.error} is defined, the sender is closing the connection due to an error.\r\n */\r\nexport interface CloseMessage extends HubMessageBase {\r\n    /** @inheritDoc */\r\n    readonly type: MessageType.Close;\r\n    /** The error that triggered the close, if any.\r\n     *\r\n     * If this property is undefined, the connection was closed normally and without error.\r\n     */\r\n    readonly error?: string;\r\n\r\n    /** If true, clients with automatic reconnects enabled should attempt to reconnect after receiving the CloseMessage. Otherwise, they should not. */\r\n    readonly allowReconnect?: boolean;\r\n}\r\n\r\n/** A hub message sent to request that a streaming invocation be canceled. */\r\nexport interface CancelInvocationMessage extends HubInvocationMessage {\r\n    /** @inheritDoc */\r\n    readonly type: MessageType.CancelInvocation;\r\n    /** The invocation ID. */\r\n    readonly invocationId: string;\r\n}\r\n\r\nexport interface AckMessage extends HubMessageBase\r\n{\r\n    readonly type: MessageType.Ack;\r\n\r\n    readonly sequenceId: number;\r\n}\r\n\r\nexport interface SequenceMessage extends HubMessageBase\r\n{\r\n    readonly type: MessageType.Sequence;\r\n\r\n    readonly sequenceId: number;\r\n}\r\n\r\n/** A protocol abstraction for communicating with SignalR Hubs.  */\r\nexport interface IHubProtocol {\r\n    /** The name of the protocol. This is used by SignalR to resolve the protocol between the client and server. */\r\n    readonly name: string;\r\n    /** The version of the protocol. */\r\n    readonly version: number;\r\n    /** The {@link @microsoft/signalr.TransferFormat} of the protocol. */\r\n    readonly transferFormat: TransferFormat;\r\n\r\n    /** Creates an array of {@link @microsoft/signalr.HubMessage} objects from the specified serialized representation.\r\n     *\r\n     * If {@link @microsoft/signalr.IHubProtocol.transferFormat} is 'Text', the `input` parameter must be a string, otherwise it must be an ArrayBuffer.\r\n     *\r\n     * @param {string | ArrayBuffer} input A string or ArrayBuffer containing the serialized representation.\r\n     * @param {ILogger} logger A logger that will be used to log messages that occur during parsing.\r\n     */\r\n    parseMessages(input: string | ArrayBuffer, logger: ILogger): HubMessage[];\r\n\r\n    /** Writes the specified {@link @microsoft/signalr.HubMessage} to a string or ArrayBuffer and returns it.\r\n     *\r\n     * If {@link @microsoft/signalr.IHubProtocol.transferFormat} is 'Text', the result of this method will be a string, otherwise it will be an ArrayBuffer.\r\n     *\r\n     * @param {HubMessage} message The message to write.\r\n     * @returns {string | ArrayBuffer} A string or ArrayBuffer containing the serialized representation of the message.\r\n     */\r\n    writeMessage(message: HubMessage): string | ArrayBuffer;\r\n}","// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\n\r\nimport { IStreamResult, IStreamSubscriber, ISubscription } from \"./Stream\";\r\nimport { SubjectSubscription } from \"./Utils\";\r\n\r\n/** Stream implementation to stream items to the server. */\r\nexport class Subject<T> implements IStreamResult<T> {\r\n    /** @internal */\r\n    public observers: IStreamSubscriber<T>[];\r\n\r\n    /** @internal */\r\n    public cancelCallback?: () => Promise<void>;\r\n\r\n    constructor() {\r\n        this.observers = [];\r\n    }\r\n\r\n    public next(item: T): void {\r\n        for (const observer of this.observers) {\r\n            observer.next(item);\r\n        }\r\n    }\r\n\r\n    public error(err: any): void {\r\n        for (const observer of this.observers) {\r\n            if (observer.error) {\r\n                observer.error(err);\r\n            }\r\n        }\r\n    }\r\n\r\n    public complete(): void {\r\n        for (const observer of this.observers) {\r\n            if (observer.complete) {\r\n                observer.complete();\r\n            }\r\n        }\r\n    }\r\n\r\n    public subscribe(observer: IStreamSubscriber<T>): ISubscription<T> {\r\n        this.observers.push(observer);\r\n        return new SubjectSubscription(this, observer);\r\n    }\r\n}\r\n","// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\n\r\nimport { IConnection } from \"./IConnection\";\r\nimport { AckMessage, HubMessage, IHubProtocol, MessageType, SequenceMessage } from \"./IHubProtocol\";\r\nimport { isArrayBuffer } from \"./Utils\";\r\n\r\n/** @private */\r\nexport class MessageBuffer {\r\n    private readonly _protocol: IHubProtocol;\r\n    private readonly _connection: IConnection;\r\n\r\n    private readonly _bufferSize: number = 100_000;\r\n\r\n    private _messages: BufferedItem[] = [];\r\n    private _totalMessageCount: number = 0;\r\n    private _waitForSequenceMessage: boolean = false;\r\n\r\n    // Message IDs start at 1 and always increment by 1\r\n    private _nextReceivingSequenceId = 1;\r\n    private _latestReceivedSequenceId = 0;\r\n    private _bufferedByteCount: number = 0;\r\n    private _reconnectInProgress: boolean = false;\r\n\r\n    private _ackTimerHandle?: any;\r\n\r\n    constructor(protocol: IHubProtocol, connection: IConnection, bufferSize: number) {\r\n        this._protocol = protocol;\r\n        this._connection = connection;\r\n        this._bufferSize = bufferSize;\r\n    }\r\n\r\n    public async _send(message: HubMessage): Promise<void> {\r\n        const serializedMessage = this._protocol.writeMessage(message);\r\n\r\n        let backpressurePromise: Promise<void> = Promise.resolve();\r\n\r\n        // Only count invocation messages. Acks, pings, etc. don't need to be resent on reconnect\r\n        if (this._isInvocationMessage(message)) {\r\n            this._totalMessageCount++;\r\n            let backpressurePromiseResolver: (value: void) => void = () => {};\r\n            let backpressurePromiseRejector: (value?: void) => void = () => {};\r\n\r\n            if (isArrayBuffer(serializedMessage)) {\r\n                this._bufferedByteCount += serializedMessage.byteLength;\r\n            } else {\r\n                this._bufferedByteCount += serializedMessage.length;\r\n            }\r\n\r\n            if (this._bufferedByteCount >= this._bufferSize) {\r\n                backpressurePromise = new Promise((resolve, reject) => {\r\n                    backpressurePromiseResolver = resolve;\r\n                    backpressurePromiseRejector = reject;\r\n                });\r\n            }\r\n\r\n            this._messages.push(new BufferedItem(serializedMessage, this._totalMessageCount,\r\n                backpressurePromiseResolver, backpressurePromiseRejector));\r\n        }\r\n\r\n        try {\r\n            // If this is set it means we are reconnecting or resending\r\n            // We don't want to send on a disconnected connection\r\n            // And we don't want to send if resend is running since that would mean sending\r\n            // this message twice\r\n            if (!this._reconnectInProgress) {\r\n                await this._connection.send(serializedMessage);\r\n            }\r\n        } catch {\r\n            this._disconnected();\r\n        }\r\n        await backpressurePromise;\r\n    }\r\n\r\n    public _ack(ackMessage: AckMessage): void {\r\n        let newestAckedMessage = -1;\r\n\r\n        // Find index of newest message being acked\r\n        for (let index = 0; index < this._messages.length; index++) {\r\n            const element = this._messages[index];\r\n            if (element._id <= ackMessage.sequenceId) {\r\n                newestAckedMessage = index;\r\n                if (isArrayBuffer(element._message)) {\r\n                    this._bufferedByteCount -= element._message.byteLength;\r\n                } else {\r\n                    this._bufferedByteCount -= element._message.length;\r\n                }\r\n                // resolve items that have already been sent and acked\r\n                element._resolver();\r\n            } else if (this._bufferedByteCount < this._bufferSize) {\r\n                // resolve items that now fall under the buffer limit but haven't been acked\r\n                element._resolver();\r\n            } else {\r\n                break;\r\n            }\r\n        }\r\n\r\n        if (newestAckedMessage !== -1) {\r\n            // We're removing everything including the message pointed to, so add 1\r\n            this._messages = this._messages.slice(newestAckedMessage + 1);\r\n        }\r\n    }\r\n\r\n    public _shouldProcessMessage(message: HubMessage): boolean {\r\n        if (this._waitForSequenceMessage) {\r\n            if (message.type !== MessageType.Sequence) {\r\n                return false;\r\n            } else {\r\n                this._waitForSequenceMessage = false;\r\n                return true;\r\n            }\r\n        }\r\n\r\n        // No special processing for acks, pings, etc.\r\n        if (!this._isInvocationMessage(message)) {\r\n            return true;\r\n        }\r\n\r\n        const currentId = this._nextReceivingSequenceId;\r\n        this._nextReceivingSequenceId++;\r\n        if (currentId <= this._latestReceivedSequenceId) {\r\n            if (currentId === this._latestReceivedSequenceId) {\r\n                // Should only hit this if we just reconnected and the server is sending\r\n                // Messages it has buffered, which would mean it hasn't seen an Ack for these messages\r\n                this._ackTimer();\r\n            }\r\n            // Ignore, this is a duplicate message\r\n            return false;\r\n        }\r\n\r\n        this._latestReceivedSequenceId = currentId;\r\n\r\n        // Only start the timer for sending an Ack message when we have a message to ack. This also conveniently solves\r\n        // timer throttling by not having a recursive timer, and by starting the timer via a network call (recv)\r\n        this._ackTimer();\r\n        return true;\r\n    }\r\n\r\n    public _resetSequence(message: SequenceMessage): void {\r\n        if (message.sequenceId > this._nextReceivingSequenceId) {\r\n            // eslint-disable-next-line @typescript-eslint/no-floating-promises\r\n            this._connection.stop(new Error(\"Sequence ID greater than amount of messages we've received.\"));\r\n            return;\r\n        }\r\n\r\n        this._nextReceivingSequenceId = message.sequenceId;\r\n    }\r\n\r\n    public _disconnected(): void {\r\n        this._reconnectInProgress = true;\r\n        this._waitForSequenceMessage = true;\r\n    }\r\n\r\n    public async _resend(): Promise<void> {\r\n        const sequenceId = this._messages.length !== 0\r\n            ? this._messages[0]._id\r\n            :  this._totalMessageCount + 1;\r\n        await this._connection.send(this._protocol.writeMessage({ type: MessageType.Sequence, sequenceId }));\r\n\r\n        // Get a local variable to the _messages, just in case messages are acked while resending\r\n        // Which would slice the _messages array (which creates a new copy)\r\n        const messages = this._messages;\r\n        for (const element of messages) {\r\n            await this._connection.send(element._message);\r\n        }\r\n\r\n        this._reconnectInProgress = false;\r\n    }\r\n\r\n    public _dispose(error?: Error): void {\r\n        error ??= new Error(\"Unable to reconnect to server.\")\r\n\r\n        // Unblock backpressure if any\r\n        for (const element of this._messages) {\r\n            element._rejector(error);\r\n        }\r\n    }\r\n\r\n    private _isInvocationMessage(message: HubMessage): boolean {\r\n        // There is no way to check if something implements an interface.\r\n        // So we individually check the messages in a switch statement.\r\n        // To make sure we don't miss any message types we rely on the compiler\r\n        // seeing the function returns a value and it will do the\r\n        // exhaustive check for us on the switch statement, since we don't use 'case default'\r\n        switch (message.type) {\r\n            case MessageType.Invocation:\r\n            case MessageType.StreamItem:\r\n            case MessageType.Completion:\r\n            case MessageType.StreamInvocation:\r\n            case MessageType.CancelInvocation:\r\n                return true;\r\n            case MessageType.Close:\r\n            case MessageType.Sequence:\r\n            case MessageType.Ping:\r\n            case MessageType.Ack:\r\n                return false;\r\n        }\r\n    }\r\n\r\n    private _ackTimer(): void {\r\n        if (this._ackTimerHandle === undefined) {\r\n            this._ackTimerHandle = setTimeout(async () => {\r\n                try {\r\n                    if (!this._reconnectInProgress) {\r\n                        await this._connection.send(this._protocol.writeMessage({ type: MessageType.Ack, sequenceId: this._latestReceivedSequenceId }))\r\n                    }\r\n                // Ignore errors, that means the connection is closed and we don't care about the Ack message anymore.\r\n                } catch { }\r\n\r\n                clearTimeout(this._ackTimerHandle);\r\n                this._ackTimerHandle = undefined;\r\n            // 1 second delay so we don't spam Ack messages if there are many messages being received at once.\r\n            }, 1000);\r\n        }\r\n    }\r\n}\r\n\r\nclass BufferedItem {\r\n    constructor(message: string | ArrayBuffer, id: number, resolver: (value: void) => void, rejector: (value?: any) => void) {\r\n        this._message = message;\r\n        this._id = id;\r\n        this._resolver = resolver;\r\n        this._rejector = rejector;\r\n    }\r\n\r\n    _message: string | ArrayBuffer;\r\n    _id: number;\r\n    _resolver: (value: void) => void;\r\n    _rejector: (value?: any) => void;\r\n}\r\n","// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\n\r\nimport { HandshakeProtocol, HandshakeRequestMessage, HandshakeResponseMessage } from \"./HandshakeProtocol\";\r\nimport { IConnection } from \"./IConnection\";\r\nimport { AbortError } from \"./Errors\";\r\nimport { CancelInvocationMessage, CloseMessage, CompletionMessage, IHubProtocol, InvocationMessage, MessageType, StreamInvocationMessage, StreamItemMessage } from \"./IHubProtocol\";\r\nimport { ILogger, LogLevel } from \"./ILogger\";\r\nimport { IRetryPolicy } from \"./IRetryPolicy\";\r\nimport { IStreamResult } from \"./Stream\";\r\nimport { Subject } from \"./Subject\";\r\nimport { Arg, getErrorString, Platform } from \"./Utils\";\r\nimport { MessageBuffer } from \"./MessageBuffer\";\r\n\r\nconst DEFAULT_TIMEOUT_IN_MS: number = 30 * 1000;\r\nconst DEFAULT_PING_INTERVAL_IN_MS: number = 15 * 1000;\r\nconst DEFAULT_STATEFUL_RECONNECT_BUFFER_SIZE = 100_000;\r\n\r\n/** Describes the current state of the {@link HubConnection} to the server. */\r\nexport enum HubConnectionState {\r\n    /** The hub connection is disconnected. */\r\n    Disconnected = \"Disconnected\",\r\n    /** The hub connection is connecting. */\r\n    Connecting = \"Connecting\",\r\n    /** The hub connection is connected. */\r\n    Connected = \"Connected\",\r\n    /** The hub connection is disconnecting. */\r\n    Disconnecting = \"Disconnecting\",\r\n    /** The hub connection is reconnecting. */\r\n    Reconnecting = \"Reconnecting\",\r\n}\r\n\r\n/** Represents a connection to a SignalR Hub. */\r\nexport class HubConnection {\r\n    private readonly _cachedPingMessage: string | ArrayBuffer;\r\n    // Needs to not start with _ for tests\r\n    // eslint-disable-next-line @typescript-eslint/naming-convention\r\n    private readonly connection: IConnection;\r\n    private readonly _logger: ILogger;\r\n    private readonly _reconnectPolicy?: IRetryPolicy;\r\n    private readonly _statefulReconnectBufferSize: number;\r\n    private _protocol: IHubProtocol;\r\n    private _handshakeProtocol: HandshakeProtocol;\r\n    private _callbacks: { [invocationId: string]: (invocationEvent: StreamItemMessage | CompletionMessage | null, error?: Error) => void };\r\n    private _methods: { [name: string]: (((...args: any[]) => void) | ((...args: any[]) => any))[] };\r\n    private _invocationId: number;\r\n    private _messageBuffer?: MessageBuffer;\r\n\r\n    private _closedCallbacks: ((error?: Error) => void)[];\r\n    private _reconnectingCallbacks: ((error?: Error) => void)[];\r\n    private _reconnectedCallbacks: ((connectionId?: string) => void)[];\r\n\r\n    private _receivedHandshakeResponse: boolean;\r\n    private _handshakeResolver!: (value?: PromiseLike<{}>) => void;\r\n    private _handshakeRejecter!: (reason?: any) => void;\r\n    private _stopDuringStartError?: Error;\r\n\r\n    private _connectionState: HubConnectionState;\r\n    // connectionStarted is tracked independently from connectionState, so we can check if the\r\n    // connection ever did successfully transition from connecting to connected before disconnecting.\r\n    private _connectionStarted: boolean;\r\n    private _startPromise?: Promise<void>;\r\n    private _stopPromise?: Promise<void>;\r\n    private _nextKeepAlive: number = 0;\r\n\r\n    // The type of these a) doesn't matter and b) varies when building in browser and node contexts\r\n    // Since we're building the WebPack bundle directly from the TypeScript, this matters (previously\r\n    // we built the bundle from the compiled JavaScript).\r\n    private _reconnectDelayHandle?: any;\r\n    private _timeoutHandle?: any;\r\n    private _pingServerHandle?: any;\r\n\r\n    private _freezeEventListener = () =>\r\n    {\r\n        this._logger.log(LogLevel.Warning, \"The page is being frozen, this will likely lead to the connection being closed and messages being lost. For more information see the docs at https://learn.microsoft.com/aspnet/core/signalr/javascript-client#bsleep\");\r\n    };\r\n\r\n    /** The server timeout in milliseconds.\r\n     *\r\n     * If this timeout elapses without receiving any messages from the server, the connection will be terminated with an error.\r\n     * The default timeout value is 30,000 milliseconds (30 seconds).\r\n     */\r\n    public serverTimeoutInMilliseconds: number;\r\n\r\n    /** Default interval at which to ping the server.\r\n     *\r\n     * The default value is 15,000 milliseconds (15 seconds).\r\n     * Allows the server to detect hard disconnects (like when a client unplugs their computer).\r\n     * The ping will happen at most as often as the server pings.\r\n     * If the server pings every 5 seconds, a value lower than 5 will ping every 5 seconds.\r\n     */\r\n    public keepAliveIntervalInMilliseconds: number;\r\n\r\n    /** @internal */\r\n    // Using a public static factory method means we can have a private constructor and an _internal_\r\n    // create method that can be used by HubConnectionBuilder. An \"internal\" constructor would just\r\n    // be stripped away and the '.d.ts' file would have no constructor, which is interpreted as a\r\n    // public parameter-less constructor.\r\n    public static create(\r\n        connection: IConnection,\r\n        logger: ILogger,\r\n        protocol: IHubProtocol,\r\n        reconnectPolicy?: IRetryPolicy,\r\n        serverTimeoutInMilliseconds?: number,\r\n        keepAliveIntervalInMilliseconds?: number,\r\n        statefulReconnectBufferSize?: number): HubConnection {\r\n        return new HubConnection(connection, logger, protocol, reconnectPolicy,\r\n            serverTimeoutInMilliseconds, keepAliveIntervalInMilliseconds, statefulReconnectBufferSize);\r\n    }\r\n\r\n    private constructor(\r\n        connection: IConnection,\r\n        logger: ILogger,\r\n        protocol: IHubProtocol,\r\n        reconnectPolicy?: IRetryPolicy,\r\n        serverTimeoutInMilliseconds?: number,\r\n        keepAliveIntervalInMilliseconds?: number,\r\n        statefulReconnectBufferSize?: number) {\r\n        Arg.isRequired(connection, \"connection\");\r\n        Arg.isRequired(logger, \"logger\");\r\n        Arg.isRequired(protocol, \"protocol\");\r\n\r\n        this.serverTimeoutInMilliseconds = serverTimeoutInMilliseconds ?? DEFAULT_TIMEOUT_IN_MS;\r\n        this.keepAliveIntervalInMilliseconds = keepAliveIntervalInMilliseconds ?? DEFAULT_PING_INTERVAL_IN_MS;\r\n\r\n        this._statefulReconnectBufferSize = statefulReconnectBufferSize ?? DEFAULT_STATEFUL_RECONNECT_BUFFER_SIZE;\r\n\r\n        this._logger = logger;\r\n        this._protocol = protocol;\r\n        this.connection = connection;\r\n        this._reconnectPolicy = reconnectPolicy;\r\n        this._handshakeProtocol = new HandshakeProtocol();\r\n\r\n        this.connection.onreceive = (data: any) => this._processIncomingData(data);\r\n        this.connection.onclose = (error?: Error) => this._connectionClosed(error);\r\n\r\n        this._callbacks = {};\r\n        this._methods = {};\r\n        this._closedCallbacks = [];\r\n        this._reconnectingCallbacks = [];\r\n        this._reconnectedCallbacks = [];\r\n        this._invocationId = 0;\r\n        this._receivedHandshakeResponse = false;\r\n        this._connectionState = HubConnectionState.Disconnected;\r\n        this._connectionStarted = false;\r\n\r\n        this._cachedPingMessage = this._protocol.writeMessage({ type: MessageType.Ping });\r\n    }\r\n\r\n    /** Indicates the state of the {@link HubConnection} to the server. */\r\n    get state(): HubConnectionState {\r\n        return this._connectionState;\r\n    }\r\n\r\n    /** Represents the connection id of the {@link HubConnection} on the server. The connection id will be null when the connection is either\r\n     *  in the disconnected state or if the negotiation step was skipped.\r\n     */\r\n    get connectionId(): string | null {\r\n        return this.connection ? (this.connection.connectionId || null) : null;\r\n    }\r\n\r\n    /** Indicates the url of the {@link HubConnection} to the server. */\r\n    get baseUrl(): string {\r\n        return this.connection.baseUrl || \"\";\r\n    }\r\n\r\n    /**\r\n     * Sets a new url for the HubConnection. Note that the url can only be changed when the connection is in either the Disconnected or\r\n     * Reconnecting states.\r\n     * @param {string} url The url to connect to.\r\n     */\r\n    set baseUrl(url: string) {\r\n        if (this._connectionState !== HubConnectionState.Disconnected && this._connectionState !== HubConnectionState.Reconnecting) {\r\n            throw new Error(\"The HubConnection must be in the Disconnected or Reconnecting state to change the url.\");\r\n        }\r\n\r\n        if (!url) {\r\n            throw new Error(\"The HubConnection url must be a valid url.\");\r\n        }\r\n\r\n        this.connection.baseUrl = url;\r\n    }\r\n\r\n    /** Starts the connection.\r\n     *\r\n     * @returns {Promise<void>} A Promise that resolves when the connection has been successfully established, or rejects with an error.\r\n     */\r\n    public start(): Promise<void> {\r\n        this._startPromise = this._startWithStateTransitions();\r\n        return this._startPromise;\r\n    }\r\n\r\n    private async _startWithStateTransitions(): Promise<void> {\r\n        if (this._connectionState !== HubConnectionState.Disconnected) {\r\n            return Promise.reject(new Error(\"Cannot start a HubConnection that is not in the 'Disconnected' state.\"));\r\n        }\r\n\r\n        this._connectionState = HubConnectionState.Connecting;\r\n        this._logger.log(LogLevel.Debug, \"Starting HubConnection.\");\r\n\r\n        try {\r\n            await this._startInternal();\r\n\r\n            if (Platform.isBrowser) {\r\n                // Log when the browser freezes the tab so users know why their connection unexpectedly stopped working\r\n                window.document.addEventListener(\"freeze\", this._freezeEventListener);\r\n            }\r\n\r\n            this._connectionState = HubConnectionState.Connected;\r\n            this._connectionStarted = true;\r\n            this._logger.log(LogLevel.Debug, \"HubConnection connected successfully.\");\r\n        } catch (e) {\r\n            this._connectionState = HubConnectionState.Disconnected;\r\n            this._logger.log(LogLevel.Debug, `HubConnection failed to start successfully because of error '${e}'.`);\r\n            return Promise.reject(e);\r\n        }\r\n    }\r\n\r\n    private async _startInternal() {\r\n        this._stopDuringStartError = undefined;\r\n        this._receivedHandshakeResponse = false;\r\n        // Set up the promise before any connection is (re)started otherwise it could race with received messages\r\n        const handshakePromise = new Promise((resolve, reject) => {\r\n            this._handshakeResolver = resolve;\r\n            this._handshakeRejecter = reject;\r\n        });\r\n\r\n        await this.connection.start(this._protocol.transferFormat);\r\n\r\n        try {\r\n            let version = this._protocol.version;\r\n            if (!this.connection.features.reconnect) {\r\n                // Stateful Reconnect starts with HubProtocol version 2, newer clients connecting to older servers will fail to connect due to\r\n                // the handshake only supporting version 1, so we will try to send version 1 during the handshake to keep old servers working.\r\n                version = 1;\r\n            }\r\n\r\n            const handshakeRequest: HandshakeRequestMessage = {\r\n                protocol: this._protocol.name,\r\n                version,\r\n            };\r\n\r\n            this._logger.log(LogLevel.Debug, \"Sending handshake request.\");\r\n\r\n            await this._sendMessage(this._handshakeProtocol.writeHandshakeRequest(handshakeRequest));\r\n\r\n            this._logger.log(LogLevel.Information, `Using HubProtocol '${this._protocol.name}'.`);\r\n\r\n            // defensively cleanup timeout in case we receive a message from the server before we finish start\r\n            this._cleanupTimeout();\r\n            this._resetTimeoutPeriod();\r\n            this._resetKeepAliveInterval();\r\n\r\n            await handshakePromise;\r\n\r\n            // It's important to check the stopDuringStartError instead of just relying on the handshakePromise\r\n            // being rejected on close, because this continuation can run after both the handshake completed successfully\r\n            // and the connection was closed.\r\n            if (this._stopDuringStartError) {\r\n                // It's important to throw instead of returning a rejected promise, because we don't want to allow any state\r\n                // transitions to occur between now and the calling code observing the exceptions. Returning a rejected promise\r\n                // will cause the calling continuation to get scheduled to run later.\r\n                // eslint-disable-next-line @typescript-eslint/no-throw-literal\r\n                throw this._stopDuringStartError;\r\n            }\r\n\r\n            const useStatefulReconnect = this.connection.features.reconnect || false;\r\n            if (useStatefulReconnect) {\r\n                this._messageBuffer = new MessageBuffer(this._protocol, this.connection, this._statefulReconnectBufferSize);\r\n                this.connection.features.disconnected = this._messageBuffer._disconnected.bind(this._messageBuffer);\r\n                this.connection.features.resend = () => {\r\n                    if (this._messageBuffer) {\r\n                        return this._messageBuffer._resend();\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (!this.connection.features.inherentKeepAlive) {\r\n                await this._sendMessage(this._cachedPingMessage);\r\n            }\r\n        } catch (e) {\r\n            this._logger.log(LogLevel.Debug, `Hub handshake failed with error '${e}' during start(). Stopping HubConnection.`);\r\n\r\n            this._cleanupTimeout();\r\n            this._cleanupPingTimer();\r\n\r\n            // HttpConnection.stop() should not complete until after the onclose callback is invoked.\r\n            // This will transition the HubConnection to the disconnected state before HttpConnection.stop() completes.\r\n            await this.connection.stop(e);\r\n            throw e;\r\n        }\r\n    }\r\n\r\n    /** Stops the connection.\r\n     *\r\n     * @returns {Promise<void>} A Promise that resolves when the connection has been successfully terminated, or rejects with an error.\r\n     */\r\n    public async stop(): Promise<void> {\r\n        // Capture the start promise before the connection might be restarted in an onclose callback.\r\n        const startPromise = this._startPromise;\r\n        this.connection.features.reconnect = false;\r\n\r\n        this._stopPromise = this._stopInternal();\r\n        await this._stopPromise;\r\n\r\n        try {\r\n            // Awaiting undefined continues immediately\r\n            await startPromise;\r\n        } catch (e) {\r\n            // This exception is returned to the user as a rejected Promise from the start method.\r\n        }\r\n    }\r\n\r\n    private _stopInternal(error?: Error): Promise<void> {\r\n        if (this._connectionState === HubConnectionState.Disconnected) {\r\n            this._logger.log(LogLevel.Debug, `Call to HubConnection.stop(${error}) ignored because it is already in the disconnected state.`);\r\n            return Promise.resolve();\r\n        }\r\n\r\n        if (this._connectionState === HubConnectionState.Disconnecting) {\r\n            this._logger.log(LogLevel.Debug, `Call to HttpConnection.stop(${error}) ignored because the connection is already in the disconnecting state.`);\r\n            return this._stopPromise!;\r\n        }\r\n\r\n        const state = this._connectionState;\r\n        this._connectionState = HubConnectionState.Disconnecting;\r\n\r\n        this._logger.log(LogLevel.Debug, \"Stopping HubConnection.\");\r\n\r\n        if (this._reconnectDelayHandle) {\r\n            // We're in a reconnect delay which means the underlying connection is currently already stopped.\r\n            // Just clear the handle to stop the reconnect loop (which no one is waiting on thankfully) and\r\n            // fire the onclose callbacks.\r\n            this._logger.log(LogLevel.Debug, \"Connection stopped during reconnect delay. Done reconnecting.\");\r\n\r\n            clearTimeout(this._reconnectDelayHandle);\r\n            this._reconnectDelayHandle = undefined;\r\n\r\n            this._completeClose();\r\n            return Promise.resolve();\r\n        }\r\n\r\n        if (state === HubConnectionState.Connected) {\r\n            // eslint-disable-next-line @typescript-eslint/no-floating-promises\r\n            this._sendCloseMessage();\r\n        }\r\n\r\n        this._cleanupTimeout();\r\n        this._cleanupPingTimer();\r\n        this._stopDuringStartError = error || new AbortError(\"The connection was stopped before the hub handshake could complete.\");\r\n\r\n        // HttpConnection.stop() should not complete until after either HttpConnection.start() fails\r\n        // or the onclose callback is invoked. The onclose callback will transition the HubConnection\r\n        // to the disconnected state if need be before HttpConnection.stop() completes.\r\n        return this.connection.stop(error);\r\n    }\r\n\r\n    private async _sendCloseMessage() {\r\n        try {\r\n            await this._sendWithProtocol(this._createCloseMessage());\r\n        } catch {\r\n            // Ignore, this is a best effort attempt to let the server know the client closed gracefully.\r\n        }\r\n    }\r\n\r\n    /** Invokes a streaming hub method on the server using the specified name and arguments.\r\n     *\r\n     * @typeparam T The type of the items returned by the server.\r\n     * @param {string} methodName The name of the server method to invoke.\r\n     * @param {any[]} args The arguments used to invoke the server method.\r\n     * @returns {IStreamResult<T>} An object that yields results from the server as they are received.\r\n     */\r\n    public stream<T = any>(methodName: string, ...args: any[]): IStreamResult<T> {\r\n        const [streams, streamIds] = this._replaceStreamingParams(args);\r\n        const invocationDescriptor = this._createStreamInvocation(methodName, args, streamIds);\r\n\r\n        // eslint-disable-next-line prefer-const\r\n        let promiseQueue: Promise<void>;\r\n\r\n        const subject = new Subject<T>();\r\n        subject.cancelCallback = () => {\r\n            const cancelInvocation: CancelInvocationMessage = this._createCancelInvocation(invocationDescriptor.invocationId);\r\n\r\n            delete this._callbacks[invocationDescriptor.invocationId];\r\n\r\n            return promiseQueue.then(() => {\r\n                return this._sendWithProtocol(cancelInvocation);\r\n            });\r\n        };\r\n\r\n        this._callbacks[invocationDescriptor.invocationId] = (invocationEvent: CompletionMessage | StreamItemMessage | null, error?: Error) => {\r\n            if (error) {\r\n                subject.error(error);\r\n                return;\r\n            } else if (invocationEvent) {\r\n                // invocationEvent will not be null when an error is not passed to the callback\r\n                if (invocationEvent.type === MessageType.Completion) {\r\n                    if (invocationEvent.error) {\r\n                        subject.error(new Error(invocationEvent.error));\r\n                    } else {\r\n                        subject.complete();\r\n                    }\r\n                } else {\r\n                    subject.next((invocationEvent.item) as T);\r\n                }\r\n            }\r\n        };\r\n\r\n        promiseQueue = this._sendWithProtocol(invocationDescriptor)\r\n            .catch((e) => {\r\n                subject.error(e);\r\n                delete this._callbacks[invocationDescriptor.invocationId];\r\n            });\r\n\r\n        this._launchStreams(streams, promiseQueue);\r\n\r\n        return subject;\r\n    }\r\n\r\n    private _sendMessage(message: any) {\r\n        this._resetKeepAliveInterval();\r\n        return this.connection.send(message);\r\n    }\r\n\r\n    /**\r\n     * Sends a js object to the server.\r\n     * @param message The js object to serialize and send.\r\n     */\r\n    private _sendWithProtocol(message: any) {\r\n        if (this._messageBuffer) {\r\n            return this._messageBuffer._send(message);\r\n        } else {\r\n            return this._sendMessage(this._protocol.writeMessage(message));\r\n        }\r\n    }\r\n\r\n    /** Invokes a hub method on the server using the specified name and arguments. Does not wait for a response from the receiver.\r\n     *\r\n     * The Promise returned by this method resolves when the client has sent the invocation to the server. The server may still\r\n     * be processing the invocation.\r\n     *\r\n     * @param {string} methodName The name of the server method to invoke.\r\n     * @param {any[]} args The arguments used to invoke the server method.\r\n     * @returns {Promise<void>} A Promise that resolves when the invocation has been successfully sent, or rejects with an error.\r\n     */\r\n    public send(methodName: string, ...args: any[]): Promise<void> {\r\n        const [streams, streamIds] = this._replaceStreamingParams(args);\r\n        const sendPromise = this._sendWithProtocol(this._createInvocation(methodName, args, true, streamIds));\r\n\r\n        this._launchStreams(streams, sendPromise);\r\n\r\n        return sendPromise;\r\n    }\r\n\r\n    /** Invokes a hub method on the server using the specified name and arguments.\r\n     *\r\n     * The Promise returned by this method resolves when the server indicates it has finished invoking the method. When the promise\r\n     * resolves, the server has finished invoking the method. If the server method returns a result, it is produced as the result of\r\n     * resolving the Promise.\r\n     *\r\n     * @typeparam T The expected return type.\r\n     * @param {string} methodName The name of the server method to invoke.\r\n     * @param {any[]} args The arguments used to invoke the server method.\r\n     * @returns {Promise<T>} A Promise that resolves with the result of the server method (if any), or rejects with an error.\r\n     */\r\n    public invoke<T = any>(methodName: string, ...args: any[]): Promise<T> {\r\n        const [streams, streamIds] = this._replaceStreamingParams(args);\r\n        const invocationDescriptor = this._createInvocation(methodName, args, false, streamIds);\r\n\r\n        const p = new Promise<any>((resolve, reject) => {\r\n            // invocationId will always have a value for a non-blocking invocation\r\n            this._callbacks[invocationDescriptor.invocationId!] = (invocationEvent: StreamItemMessage | CompletionMessage | null, error?: Error) => {\r\n                if (error) {\r\n                    reject(error);\r\n                    return;\r\n                } else if (invocationEvent) {\r\n                    // invocationEvent will not be null when an error is not passed to the callback\r\n                    if (invocationEvent.type === MessageType.Completion) {\r\n                        if (invocationEvent.error) {\r\n                            reject(new Error(invocationEvent.error));\r\n                        } else {\r\n                            resolve(invocationEvent.result);\r\n                        }\r\n                    } else {\r\n                        reject(new Error(`Unexpected message type: ${invocationEvent.type}`));\r\n                    }\r\n                }\r\n            };\r\n\r\n            const promiseQueue = this._sendWithProtocol(invocationDescriptor)\r\n                .catch((e) => {\r\n                    reject(e);\r\n                    // invocationId will always have a value for a non-blocking invocation\r\n                    delete this._callbacks[invocationDescriptor.invocationId!];\r\n                });\r\n\r\n            this._launchStreams(streams, promiseQueue);\r\n        });\r\n\r\n        return p;\r\n    }\r\n\r\n    /** Registers a handler that will be invoked when the hub method with the specified method name is invoked.\r\n     *\r\n     * @param {string} methodName The name of the hub method to define.\r\n     * @param {Function} newMethod The handler that will be raised when the hub method is invoked.\r\n     */\r\n    public on(methodName: string, newMethod: (...args: any[]) => any): void\r\n    public on(methodName: string, newMethod: (...args: any[]) => void): void {\r\n        if (!methodName || !newMethod) {\r\n            return;\r\n        }\r\n\r\n        methodName = methodName.toLowerCase();\r\n        if (!this._methods[methodName]) {\r\n            this._methods[methodName] = [];\r\n        }\r\n\r\n        // Preventing adding the same handler multiple times.\r\n        if (this._methods[methodName].indexOf(newMethod) !== -1) {\r\n            return;\r\n        }\r\n\r\n        this._methods[methodName].push(newMethod);\r\n    }\r\n\r\n    /** Removes all handlers for the specified hub method.\r\n     *\r\n     * @param {string} methodName The name of the method to remove handlers for.\r\n     */\r\n    public off(methodName: string): void;\r\n\r\n    /** Removes the specified handler for the specified hub method.\r\n     *\r\n     * You must pass the exact same Function instance as was previously passed to {@link @microsoft/signalr.HubConnection.on}. Passing a different instance (even if the function\r\n     * body is the same) will not remove the handler.\r\n     *\r\n     * @param {string} methodName The name of the method to remove handlers for.\r\n     * @param {Function} method The handler to remove. This must be the same Function instance as the one passed to {@link @microsoft/signalr.HubConnection.on}.\r\n     */\r\n    public off(methodName: string, method: (...args: any[]) => void): void;\r\n    public off(methodName: string, method?: (...args: any[]) => void): void {\r\n        if (!methodName) {\r\n            return;\r\n        }\r\n\r\n        methodName = methodName.toLowerCase();\r\n        const handlers = this._methods[methodName];\r\n        if (!handlers) {\r\n            return;\r\n        }\r\n        if (method) {\r\n            const removeIdx = handlers.indexOf(method);\r\n            if (removeIdx !== -1) {\r\n                handlers.splice(removeIdx, 1);\r\n                if (handlers.length === 0) {\r\n                    delete this._methods[methodName];\r\n                }\r\n            }\r\n        } else {\r\n            delete this._methods[methodName];\r\n        }\r\n\r\n    }\r\n\r\n    /** Registers a handler that will be invoked when the connection is closed.\r\n     *\r\n     * @param {Function} callback The handler that will be invoked when the connection is closed. Optionally receives a single argument containing the error that caused the connection to close (if any).\r\n     */\r\n    public onclose(callback: (error?: Error) => void): void {\r\n        if (callback) {\r\n            this._closedCallbacks.push(callback);\r\n        }\r\n    }\r\n\r\n    /** Registers a handler that will be invoked when the connection starts reconnecting.\r\n     *\r\n     * @param {Function} callback The handler that will be invoked when the connection starts reconnecting. Optionally receives a single argument containing the error that caused the connection to start reconnecting (if any).\r\n     */\r\n    public onreconnecting(callback: (error?: Error) => void): void {\r\n        if (callback) {\r\n            this._reconnectingCallbacks.push(callback);\r\n        }\r\n    }\r\n\r\n    /** Registers a handler that will be invoked when the connection successfully reconnects.\r\n     *\r\n     * @param {Function} callback The handler that will be invoked when the connection successfully reconnects.\r\n     */\r\n    public onreconnected(callback: (connectionId?: string) => void): void {\r\n        if (callback) {\r\n            this._reconnectedCallbacks.push(callback);\r\n        }\r\n    }\r\n\r\n    private _processIncomingData(data: any) {\r\n        this._cleanupTimeout();\r\n\r\n        if (!this._receivedHandshakeResponse) {\r\n            data = this._processHandshakeResponse(data);\r\n            this._receivedHandshakeResponse = true;\r\n        }\r\n\r\n        // Data may have all been read when processing handshake response\r\n        if (data) {\r\n            // Parse the messages\r\n            const messages = this._protocol.parseMessages(data, this._logger);\r\n\r\n            for (const message of messages) {\r\n                if (this._messageBuffer && !this._messageBuffer._shouldProcessMessage(message)) {\r\n                    // Don't process the message, we are either waiting for a SequenceMessage or received a duplicate message\r\n                    continue;\r\n                }\r\n\r\n                switch (message.type) {\r\n                    case MessageType.Invocation:\r\n                        this._invokeClientMethod(message)\r\n                            .catch((e) => {\r\n                                this._logger.log(LogLevel.Error, `Invoke client method threw error: ${getErrorString(e)}`)\r\n                            });\r\n                        break;\r\n                    case MessageType.StreamItem:\r\n                    case MessageType.Completion: {\r\n                        const callback = this._callbacks[message.invocationId];\r\n                        if (callback) {\r\n                            if (message.type === MessageType.Completion) {\r\n                                delete this._callbacks[message.invocationId];\r\n                            }\r\n                            try {\r\n                                callback(message);\r\n                            } catch (e) {\r\n                                this._logger.log(LogLevel.Error, `Stream callback threw error: ${getErrorString(e)}`);\r\n                            }\r\n                        }\r\n                        break;\r\n                    }\r\n                    case MessageType.Ping:\r\n                        // Don't care about pings\r\n                        break;\r\n                    case MessageType.Close: {\r\n                        this._logger.log(LogLevel.Information, \"Close message received from server.\");\r\n\r\n                        const error = message.error ? new Error(\"Server returned an error on close: \" + message.error) : undefined;\r\n\r\n                        if (message.allowReconnect === true) {\r\n                            // It feels wrong not to await connection.stop() here, but processIncomingData is called as part of an onreceive callback which is not async,\r\n                            // this is already the behavior for serverTimeout(), and HttpConnection.Stop() should catch and log all possible exceptions.\r\n\r\n                            // eslint-disable-next-line @typescript-eslint/no-floating-promises\r\n                            this.connection.stop(error);\r\n                        } else {\r\n                            // We cannot await stopInternal() here, but subsequent calls to stop() will await this if stopInternal() is still ongoing.\r\n                            this._stopPromise = this._stopInternal(error);\r\n                        }\r\n\r\n                        break;\r\n                    }\r\n                    case MessageType.Ack:\r\n                        if (this._messageBuffer) {\r\n                            this._messageBuffer._ack(message);\r\n                        }\r\n                        break;\r\n                    case MessageType.Sequence:\r\n                        if (this._messageBuffer) {\r\n                            this._messageBuffer._resetSequence(message);\r\n                        }\r\n                        break;\r\n                    default:\r\n                        this._logger.log(LogLevel.Warning, `Invalid message type: ${message.type}.`);\r\n                        break;\r\n                }\r\n            }\r\n        }\r\n\r\n        this._resetTimeoutPeriod();\r\n    }\r\n\r\n    private _processHandshakeResponse(data: any): any {\r\n        let responseMessage: HandshakeResponseMessage;\r\n        let remainingData: any;\r\n\r\n        try {\r\n            [remainingData, responseMessage] = this._handshakeProtocol.parseHandshakeResponse(data);\r\n        } catch (e) {\r\n            const message = \"Error parsing handshake response: \" + e;\r\n            this._logger.log(LogLevel.Error, message);\r\n\r\n            const error = new Error(message);\r\n            this._handshakeRejecter(error);\r\n            throw error;\r\n        }\r\n        if (responseMessage.error) {\r\n            const message = \"Server returned handshake error: \" + responseMessage.error;\r\n            this._logger.log(LogLevel.Error, message);\r\n\r\n            const error = new Error(message);\r\n            this._handshakeRejecter(error);\r\n            throw error;\r\n        } else {\r\n            this._logger.log(LogLevel.Debug, \"Server handshake complete.\");\r\n        }\r\n\r\n        this._handshakeResolver();\r\n        return remainingData;\r\n    }\r\n\r\n    private _resetKeepAliveInterval() {\r\n        if (this.connection.features.inherentKeepAlive) {\r\n            return;\r\n        }\r\n\r\n        // Set the time we want the next keep alive to be sent\r\n        // Timer will be setup on next message receive\r\n        this._nextKeepAlive = new Date().getTime() + this.keepAliveIntervalInMilliseconds;\r\n\r\n        this._cleanupPingTimer();\r\n    }\r\n\r\n    private _resetTimeoutPeriod() {\r\n        if (!this.connection.features || !this.connection.features.inherentKeepAlive) {\r\n            // Set the timeout timer\r\n            this._timeoutHandle = setTimeout(() => this.serverTimeout(), this.serverTimeoutInMilliseconds);\r\n\r\n            // Set keepAlive timer if there isn't one\r\n            if (this._pingServerHandle === undefined)\r\n            {\r\n                let nextPing = this._nextKeepAlive - new Date().getTime();\r\n                if (nextPing < 0) {\r\n                    nextPing = 0;\r\n                }\r\n\r\n                // The timer needs to be set from a networking callback to avoid Chrome timer throttling from causing timers to run once a minute\r\n                this._pingServerHandle = setTimeout(async () => {\r\n                    if (this._connectionState === HubConnectionState.Connected) {\r\n                        try {\r\n                            await this._sendMessage(this._cachedPingMessage);\r\n                        } catch {\r\n                            // We don't care about the error. It should be seen elsewhere in the client.\r\n                            // The connection is probably in a bad or closed state now, cleanup the timer so it stops triggering\r\n                            this._cleanupPingTimer();\r\n                        }\r\n                    }\r\n                }, nextPing);\r\n            }\r\n        }\r\n    }\r\n\r\n    // eslint-disable-next-line @typescript-eslint/naming-convention\r\n    private serverTimeout() {\r\n        // The server hasn't talked to us in a while. It doesn't like us anymore ... :(\r\n        // Terminate the connection, but we don't need to wait on the promise. This could trigger reconnecting.\r\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\r\n        this.connection.stop(new Error(\"Server timeout elapsed without receiving a message from the server.\"));\r\n    }\r\n\r\n    private async _invokeClientMethod(invocationMessage: InvocationMessage) {\r\n        const methodName = invocationMessage.target.toLowerCase();\r\n        const methods = this._methods[methodName];\r\n        if (!methods) {\r\n            this._logger.log(LogLevel.Warning, `No client method with the name '${methodName}' found.`);\r\n\r\n            // No handlers provided by client but the server is expecting a response still, so we send an error\r\n            if (invocationMessage.invocationId) {\r\n                this._logger.log(LogLevel.Warning, `No result given for '${methodName}' method and invocation ID '${invocationMessage.invocationId}'.`);\r\n                await this._sendWithProtocol(this._createCompletionMessage(invocationMessage.invocationId, \"Client didn't provide a result.\", null));\r\n            }\r\n            return;\r\n        }\r\n\r\n        // Avoid issues with handlers removing themselves thus modifying the list while iterating through it\r\n        const methodsCopy = methods.slice();\r\n\r\n        // Server expects a response\r\n        const expectsResponse = invocationMessage.invocationId ? true : false;\r\n        // We preserve the last result or exception but still call all handlers\r\n        let res;\r\n        let exception;\r\n        let completionMessage;\r\n        for (const m of methodsCopy) {\r\n            try {\r\n                const prevRes = res;\r\n                res = await m.apply(this, invocationMessage.arguments);\r\n                if (expectsResponse && res && prevRes) {\r\n                    this._logger.log(LogLevel.Error, `Multiple results provided for '${methodName}'. Sending error to server.`);\r\n                    completionMessage = this._createCompletionMessage(invocationMessage.invocationId!, `Client provided multiple results.`, null);\r\n                }\r\n                // Ignore exception if we got a result after, the exception will be logged\r\n                exception = undefined;\r\n            } catch (e) {\r\n                exception = e;\r\n                this._logger.log(LogLevel.Error, `A callback for the method '${methodName}' threw error '${e}'.`);\r\n            }\r\n        }\r\n        if (completionMessage) {\r\n            await this._sendWithProtocol(completionMessage);\r\n        } else if (expectsResponse) {\r\n            // If there is an exception that means either no result was given or a handler after a result threw\r\n            if (exception) {\r\n                completionMessage = this._createCompletionMessage(invocationMessage.invocationId!, `${exception}`, null);\r\n            } else if (res !== undefined) {\r\n                completionMessage = this._createCompletionMessage(invocationMessage.invocationId!, null, res);\r\n            } else {\r\n                this._logger.log(LogLevel.Warning, `No result given for '${methodName}' method and invocation ID '${invocationMessage.invocationId}'.`);\r\n                // Client didn't provide a result or throw from a handler, server expects a response so we send an error\r\n                completionMessage = this._createCompletionMessage(invocationMessage.invocationId!, \"Client didn't provide a result.\", null);\r\n            }\r\n            await this._sendWithProtocol(completionMessage);\r\n        } else {\r\n            if (res) {\r\n                this._logger.log(LogLevel.Error, `Result given for '${methodName}' method but server is not expecting a result.`);\r\n            }\r\n        }\r\n    }\r\n\r\n    private _connectionClosed(error?: Error) {\r\n        this._logger.log(LogLevel.Debug, `HubConnection.connectionClosed(${error}) called while in state ${this._connectionState}.`);\r\n\r\n        // Triggering this.handshakeRejecter is insufficient because it could already be resolved without the continuation having run yet.\r\n        this._stopDuringStartError = this._stopDuringStartError || error || new AbortError(\"The underlying connection was closed before the hub handshake could complete.\");\r\n\r\n        // If the handshake is in progress, start will be waiting for the handshake promise, so we complete it.\r\n        // If it has already completed, this should just noop.\r\n        if (this._handshakeResolver) {\r\n            this._handshakeResolver();\r\n        }\r\n\r\n        this._cancelCallbacksWithError(error || new Error(\"Invocation canceled due to the underlying connection being closed.\"));\r\n\r\n        this._cleanupTimeout();\r\n        this._cleanupPingTimer();\r\n\r\n        if (this._connectionState === HubConnectionState.Disconnecting) {\r\n            this._completeClose(error);\r\n        } else if (this._connectionState === HubConnectionState.Connected && this._reconnectPolicy) {\r\n            // eslint-disable-next-line @typescript-eslint/no-floating-promises\r\n            this._reconnect(error);\r\n        } else if (this._connectionState === HubConnectionState.Connected) {\r\n            this._completeClose(error);\r\n        }\r\n\r\n        // If none of the above if conditions were true were called the HubConnection must be in either:\r\n        // 1. The Connecting state in which case the handshakeResolver will complete it and stopDuringStartError will fail it.\r\n        // 2. The Reconnecting state in which case the handshakeResolver will complete it and stopDuringStartError will fail the current reconnect attempt\r\n        //    and potentially continue the reconnect() loop.\r\n        // 3. The Disconnected state in which case we're already done.\r\n    }\r\n\r\n    private _completeClose(error?: Error) {\r\n        if (this._connectionStarted) {\r\n            this._connectionState = HubConnectionState.Disconnected;\r\n            this._connectionStarted = false;\r\n            if (this._messageBuffer) {\r\n                this._messageBuffer._dispose(error ?? new Error(\"Connection closed.\"));\r\n                this._messageBuffer = undefined;\r\n            }\r\n\r\n            if (Platform.isBrowser) {\r\n                window.document.removeEventListener(\"freeze\", this._freezeEventListener);\r\n            }\r\n\r\n            try {\r\n                this._closedCallbacks.forEach((c) => c.apply(this, [error]));\r\n            } catch (e) {\r\n                this._logger.log(LogLevel.Error, `An onclose callback called with error '${error}' threw error '${e}'.`);\r\n            }\r\n        }\r\n    }\r\n\r\n    private async _reconnect(error?: Error) {\r\n        const reconnectStartTime = Date.now();\r\n        let previousReconnectAttempts = 0;\r\n        let retryError = error !== undefined ? error : new Error(\"Attempting to reconnect due to a unknown error.\");\r\n\r\n        let nextRetryDelay = this._getNextRetryDelay(previousReconnectAttempts++, 0, retryError);\r\n\r\n        if (nextRetryDelay === null) {\r\n            this._logger.log(LogLevel.Debug, \"Connection not reconnecting because the IRetryPolicy returned null on the first reconnect attempt.\");\r\n            this._completeClose(error);\r\n            return;\r\n        }\r\n\r\n        this._connectionState = HubConnectionState.Reconnecting;\r\n\r\n        if (error) {\r\n            this._logger.log(LogLevel.Information, `Connection reconnecting because of error '${error}'.`);\r\n        } else {\r\n            this._logger.log(LogLevel.Information, \"Connection reconnecting.\");\r\n        }\r\n\r\n        if (this._reconnectingCallbacks.length !== 0) {\r\n            try {\r\n                this._reconnectingCallbacks.forEach((c) => c.apply(this, [error]));\r\n            } catch (e) {\r\n                this._logger.log(LogLevel.Error, `An onreconnecting callback called with error '${error}' threw error '${e}'.`);\r\n            }\r\n\r\n            // Exit early if an onreconnecting callback called connection.stop().\r\n            if (this._connectionState !== HubConnectionState.Reconnecting) {\r\n                this._logger.log(LogLevel.Debug, \"Connection left the reconnecting state in onreconnecting callback. Done reconnecting.\");\r\n                return;\r\n            }\r\n        }\r\n\r\n        while (nextRetryDelay !== null) {\r\n            this._logger.log(LogLevel.Information, `Reconnect attempt number ${previousReconnectAttempts} will start in ${nextRetryDelay} ms.`);\r\n\r\n            await new Promise((resolve) => {\r\n                this._reconnectDelayHandle = setTimeout(resolve, nextRetryDelay!);\r\n            });\r\n            this._reconnectDelayHandle = undefined;\r\n\r\n            if (this._connectionState !== HubConnectionState.Reconnecting) {\r\n                this._logger.log(LogLevel.Debug, \"Connection left the reconnecting state during reconnect delay. Done reconnecting.\");\r\n                return;\r\n            }\r\n\r\n            try {\r\n                await this._startInternal();\r\n\r\n                this._connectionState = HubConnectionState.Connected;\r\n                this._logger.log(LogLevel.Information, \"HubConnection reconnected successfully.\");\r\n\r\n                if (this._reconnectedCallbacks.length !== 0) {\r\n                    try {\r\n                        this._reconnectedCallbacks.forEach((c) => c.apply(this, [this.connection.connectionId]));\r\n                    } catch (e) {\r\n                        this._logger.log(LogLevel.Error, `An onreconnected callback called with connectionId '${this.connection.connectionId}; threw error '${e}'.`);\r\n                    }\r\n                }\r\n\r\n                return;\r\n            } catch (e) {\r\n                this._logger.log(LogLevel.Information, `Reconnect attempt failed because of error '${e}'.`);\r\n\r\n                if (this._connectionState !== HubConnectionState.Reconnecting) {\r\n                    this._logger.log(LogLevel.Debug, `Connection moved to the '${this._connectionState}' from the reconnecting state during reconnect attempt. Done reconnecting.`);\r\n                    // The TypeScript compiler thinks that connectionState must be Connected here. The TypeScript compiler is wrong.\r\n                    if (this._connectionState as any === HubConnectionState.Disconnecting) {\r\n                        this._completeClose();\r\n                    }\r\n                    return;\r\n                }\r\n\r\n                retryError = e instanceof Error ? e : new Error((e as any).toString());\r\n                nextRetryDelay = this._getNextRetryDelay(previousReconnectAttempts++, Date.now() - reconnectStartTime, retryError);\r\n            }\r\n        }\r\n\r\n        this._logger.log(LogLevel.Information, `Reconnect retries have been exhausted after ${Date.now() - reconnectStartTime} ms and ${previousReconnectAttempts} failed attempts. Connection disconnecting.`);\r\n\r\n        this._completeClose();\r\n    }\r\n\r\n    private _getNextRetryDelay(previousRetryCount: number, elapsedMilliseconds: number, retryReason: Error) {\r\n        try {\r\n            return this._reconnectPolicy!.nextRetryDelayInMilliseconds({\r\n                elapsedMilliseconds,\r\n                previousRetryCount,\r\n                retryReason,\r\n            });\r\n        } catch (e) {\r\n            this._logger.log(LogLevel.Error, `IRetryPolicy.nextRetryDelayInMilliseconds(${previousRetryCount}, ${elapsedMilliseconds}) threw error '${e}'.`);\r\n            return null;\r\n        }\r\n    }\r\n\r\n    private _cancelCallbacksWithError(error: Error) {\r\n        const callbacks = this._callbacks;\r\n        this._callbacks = {};\r\n\r\n        Object.keys(callbacks)\r\n            .forEach((key) => {\r\n                const callback = callbacks[key];\r\n                try {\r\n                    callback(null, error);\r\n                } catch (e) {\r\n                    this._logger.log(LogLevel.Error, `Stream 'error' callback called with '${error}' threw error: ${getErrorString(e)}`);\r\n                }\r\n            });\r\n    }\r\n\r\n    private _cleanupPingTimer(): void {\r\n        if (this._pingServerHandle) {\r\n            clearTimeout(this._pingServerHandle);\r\n            this._pingServerHandle = undefined;\r\n        }\r\n    }\r\n\r\n    private _cleanupTimeout(): void {\r\n        if (this._timeoutHandle) {\r\n            clearTimeout(this._timeoutHandle);\r\n        }\r\n    }\r\n\r\n    private _createInvocation(methodName: string, args: any[], nonblocking: boolean, streamIds: string[]): InvocationMessage {\r\n        if (nonblocking) {\r\n            if (streamIds.length !== 0) {\r\n                return {\r\n                    arguments: args,\r\n                    streamIds,\r\n                    target: methodName,\r\n                    type: MessageType.Invocation,\r\n                };\r\n            } else {\r\n                return {\r\n                    arguments: args,\r\n                    target: methodName,\r\n                    type: MessageType.Invocation,\r\n                };\r\n            }\r\n        } else {\r\n            const invocationId = this._invocationId;\r\n            this._invocationId++;\r\n\r\n            if (streamIds.length !== 0) {\r\n                return {\r\n                    arguments: args,\r\n                    invocationId: invocationId.toString(),\r\n                    streamIds,\r\n                    target: methodName,\r\n                    type: MessageType.Invocation,\r\n                };\r\n            } else {\r\n                return {\r\n                    arguments: args,\r\n                    invocationId: invocationId.toString(),\r\n                    target: methodName,\r\n                    type: MessageType.Invocation,\r\n                };\r\n            }\r\n        }\r\n    }\r\n\r\n    private _launchStreams(streams: IStreamResult<any>[], promiseQueue: Promise<void>): void {\r\n        if (streams.length === 0) {\r\n            return;\r\n        }\r\n\r\n        // Synchronize stream data so they arrive in-order on the server\r\n        if (!promiseQueue) {\r\n            promiseQueue = Promise.resolve();\r\n        }\r\n\r\n        // We want to iterate over the keys, since the keys are the stream ids\r\n        // eslint-disable-next-line guard-for-in\r\n        for (const streamId in streams) {\r\n            streams[streamId].subscribe({\r\n                complete: () => {\r\n                    promiseQueue = promiseQueue.then(() => this._sendWithProtocol(this._createCompletionMessage(streamId)));\r\n                },\r\n                error: (err) => {\r\n                    let message: string;\r\n                    if (err instanceof Error) {\r\n                        message = err.message;\r\n                    } else if (err && err.toString) {\r\n                        message = err.toString();\r\n                    } else {\r\n                        message = \"Unknown error\";\r\n                    }\r\n\r\n                    promiseQueue = promiseQueue.then(() => this._sendWithProtocol(this._createCompletionMessage(streamId, message)));\r\n                },\r\n                next: (item) => {\r\n                    promiseQueue = promiseQueue.then(() => this._sendWithProtocol(this._createStreamItemMessage(streamId, item)));\r\n                },\r\n            });\r\n        }\r\n    }\r\n\r\n    private _replaceStreamingParams(args: any[]): [IStreamResult<any>[], string[]] {\r\n        const streams: IStreamResult<any>[] = [];\r\n        const streamIds: string[] = [];\r\n        for (let i = 0; i < args.length; i++) {\r\n            const argument = args[i];\r\n            if (this._isObservable(argument)) {\r\n                const streamId = this._invocationId;\r\n                this._invocationId++;\r\n                // Store the stream for later use\r\n                streams[streamId] = argument;\r\n                streamIds.push(streamId.toString());\r\n\r\n                // remove stream from args\r\n                args.splice(i, 1);\r\n            }\r\n        }\r\n\r\n        return [streams, streamIds];\r\n    }\r\n\r\n    private _isObservable(arg: any): arg is IStreamResult<any> {\r\n        // This allows other stream implementations to just work (like rxjs)\r\n        return arg && arg.subscribe && typeof arg.subscribe === \"function\";\r\n    }\r\n\r\n    private _createStreamInvocation(methodName: string, args: any[], streamIds: string[]): StreamInvocationMessage {\r\n        const invocationId = this._invocationId;\r\n        this._invocationId++;\r\n\r\n        if (streamIds.length !== 0) {\r\n            return {\r\n                arguments: args,\r\n                invocationId: invocationId.toString(),\r\n                streamIds,\r\n                target: methodName,\r\n                type: MessageType.StreamInvocation,\r\n            };\r\n        } else {\r\n            return {\r\n                arguments: args,\r\n                invocationId: invocationId.toString(),\r\n                target: methodName,\r\n                type: MessageType.StreamInvocation,\r\n            };\r\n        }\r\n    }\r\n\r\n    private _createCancelInvocation(id: string): CancelInvocationMessage {\r\n        return {\r\n            invocationId: id,\r\n            type: MessageType.CancelInvocation,\r\n        };\r\n    }\r\n\r\n    private _createStreamItemMessage(id: string, item: any): StreamItemMessage {\r\n        return {\r\n            invocationId: id,\r\n            item,\r\n            type: MessageType.StreamItem,\r\n        };\r\n    }\r\n\r\n    private _createCompletionMessage(id: string, error?: any, result?: any): CompletionMessage {\r\n        if (error) {\r\n            return {\r\n                error,\r\n                invocationId: id,\r\n                type: MessageType.Completion,\r\n            };\r\n        }\r\n\r\n        return {\r\n            invocationId: id,\r\n            result,\r\n            type: MessageType.Completion,\r\n        };\r\n    }\r\n\r\n    private _createCloseMessage(): CloseMessage {\r\n        return { type: MessageType.Close };\r\n    }\r\n}\r\n","// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\n\r\nimport { AckMessage, CompletionMessage, HubMessage, IHubProtocol, InvocationMessage, MessageType, SequenceMessage, StreamItemMessage } from \"./IHubProtocol\";\r\nimport { ILogger, LogLevel } from \"./ILogger\";\r\nimport { TransferFormat } from \"./ITransport\";\r\nimport { NullLogger } from \"./Loggers\";\r\nimport { TextMessageFormat } from \"./TextMessageFormat\";\r\n\r\nconst JSON_HUB_PROTOCOL_NAME: string = \"json\";\r\n\r\n/** Implements the JSON Hub Protocol. */\r\nexport class JsonHubProtocol implements IHubProtocol {\r\n\r\n    /** @inheritDoc */\r\n    public readonly name: string = JSON_HUB_PROTOCOL_NAME;\r\n    /** @inheritDoc */\r\n    public readonly version: number = 2;\r\n\r\n    /** @inheritDoc */\r\n    public readonly transferFormat: TransferFormat = TransferFormat.Text;\r\n\r\n    /** Creates an array of {@link @microsoft/signalr.HubMessage} objects from the specified serialized representation.\r\n     *\r\n     * @param {string} input A string containing the serialized representation.\r\n     * @param {ILogger} logger A logger that will be used to log messages that occur during parsing.\r\n     */\r\n    public parseMessages(input: string, logger: ILogger): HubMessage[] {\r\n        // The interface does allow \"ArrayBuffer\" to be passed in, but this implementation does not. So let's throw a useful error.\r\n        if (typeof input !== \"string\") {\r\n            throw new Error(\"Invalid input for JSON hub protocol. Expected a string.\");\r\n        }\r\n\r\n        if (!input) {\r\n            return [];\r\n        }\r\n\r\n        if (logger === null) {\r\n            logger = NullLogger.instance;\r\n        }\r\n\r\n        // Parse the messages\r\n        const messages = TextMessageFormat.parse(input);\r\n\r\n        const hubMessages = [];\r\n        for (const message of messages) {\r\n            const parsedMessage = JSON.parse(message) as HubMessage;\r\n            if (typeof parsedMessage.type !== \"number\") {\r\n                throw new Error(\"Invalid payload.\");\r\n            }\r\n            switch (parsedMessage.type) {\r\n                case MessageType.Invocation:\r\n                    this._isInvocationMessage(parsedMessage);\r\n                    break;\r\n                case MessageType.StreamItem:\r\n                    this._isStreamItemMessage(parsedMessage);\r\n                    break;\r\n                case MessageType.Completion:\r\n                    this._isCompletionMessage(parsedMessage);\r\n                    break;\r\n                case MessageType.Ping:\r\n                    // Single value, no need to validate\r\n                    break;\r\n                case MessageType.Close:\r\n                    // All optional values, no need to validate\r\n                    break;\r\n                case MessageType.Ack:\r\n                    this._isAckMessage(parsedMessage);\r\n                    break;\r\n                case MessageType.Sequence:\r\n                    this._isSequenceMessage(parsedMessage);\r\n                    break;\r\n                default:\r\n                    // Future protocol changes can add message types, old clients can ignore them\r\n                    logger.log(LogLevel.Information, \"Unknown message type '\" + parsedMessage.type + \"' ignored.\");\r\n                    continue;\r\n            }\r\n            hubMessages.push(parsedMessage);\r\n        }\r\n\r\n        return hubMessages;\r\n    }\r\n\r\n    /** Writes the specified {@link @microsoft/signalr.HubMessage} to a string and returns it.\r\n     *\r\n     * @param {HubMessage} message The message to write.\r\n     * @returns {string} A string containing the serialized representation of the message.\r\n     */\r\n    public writeMessage(message: HubMessage): string {\r\n        return TextMessageFormat.write(JSON.stringify(message));\r\n    }\r\n\r\n    private _isInvocationMessage(message: InvocationMessage): void {\r\n        this._assertNotEmptyString(message.target, \"Invalid payload for Invocation message.\");\r\n\r\n        if (message.invocationId !== undefined) {\r\n            this._assertNotEmptyString(message.invocationId, \"Invalid payload for Invocation message.\");\r\n        }\r\n    }\r\n\r\n    private _isStreamItemMessage(message: StreamItemMessage): void {\r\n        this._assertNotEmptyString(message.invocationId, \"Invalid payload for StreamItem message.\");\r\n\r\n        if (message.item === undefined) {\r\n            throw new Error(\"Invalid payload for StreamItem message.\");\r\n        }\r\n    }\r\n\r\n    private _isCompletionMessage(message: CompletionMessage): void {\r\n        if (message.result && message.error) {\r\n            throw new Error(\"Invalid payload for Completion message.\");\r\n        }\r\n\r\n        if (!message.result && message.error) {\r\n            this._assertNotEmptyString(message.error, \"Invalid payload for Completion message.\");\r\n        }\r\n\r\n        this._assertNotEmptyString(message.invocationId, \"Invalid payload for Completion message.\");\r\n    }\r\n\r\n    private _isAckMessage(message: AckMessage): void {\r\n        if (typeof message.sequenceId !== 'number') {\r\n            throw new Error(\"Invalid SequenceId for Ack message.\");\r\n        }\r\n    }\r\n\r\n    private _isSequenceMessage(message: SequenceMessage): void {\r\n        if (typeof message.sequenceId !== 'number') {\r\n            throw new Error(\"Invalid SequenceId for Sequence message.\");\r\n        }\r\n    }\r\n\r\n    private _assertNotEmptyString(value: any, errorMessage: string): void {\r\n        if (typeof value !== \"string\" || value === \"\") {\r\n            throw new Error(errorMessage);\r\n        }\r\n    }\r\n}\r\n","// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\n\r\nimport { DefaultReconnectPolicy } from \"./DefaultReconnectPolicy\";\r\nimport { HttpConnection } from \"./HttpConnection\";\r\nimport { HubConnection } from \"./HubConnection\";\r\nimport { IHttpConnectionOptions } from \"./IHttpConnectionOptions\";\r\nimport { IHubProtocol } from \"./IHubProtocol\";\r\nimport { ILogger, LogLevel } from \"./ILogger\";\r\nimport { IRetryPolicy } from \"./IRetryPolicy\";\r\nimport { IStatefulReconnectOptions } from \"./IStatefulReconnectOptions\";\r\nimport { HttpTransportType } from \"./ITransport\";\r\nimport { JsonHubProtocol } from \"./JsonHubProtocol\";\r\nimport { NullLogger } from \"./Loggers\";\r\nimport { Arg, ConsoleLogger } from \"./Utils\";\r\n\r\nconst LogLevelNameMapping: {[k: string]: LogLevel} = {\r\n    trace: LogLevel.Trace,\r\n    debug: LogLevel.Debug,\r\n    info: LogLevel.Information,\r\n    information: LogLevel.Information,\r\n    warn: LogLevel.Warning,\r\n    warning: LogLevel.Warning,\r\n    error: LogLevel.Error,\r\n    critical: LogLevel.Critical,\r\n    none: LogLevel.None,\r\n};\r\n\r\nfunction parseLogLevel(name: string): LogLevel {\r\n    // Case-insensitive matching via lower-casing\r\n    // Yes, I know case-folding is a complicated problem in Unicode, but we only support\r\n    // the ASCII strings defined in LogLevelNameMapping anyway, so it's fine -anurse.\r\n    const mapping = LogLevelNameMapping[name.toLowerCase()];\r\n    if (typeof mapping !== \"undefined\") {\r\n        return mapping;\r\n    } else {\r\n        throw new Error(`Unknown log level: ${name}`);\r\n    }\r\n}\r\n\r\n/** A builder for configuring {@link @microsoft/signalr.HubConnection} instances. */\r\nexport class HubConnectionBuilder {\r\n    private _serverTimeoutInMilliseconds?: number;\r\n    private _keepAliveIntervalInMilliseconds ?: number;\r\n\r\n    /** @internal */\r\n    public protocol?: IHubProtocol;\r\n    /** @internal */\r\n    public httpConnectionOptions?: IHttpConnectionOptions;\r\n    /** @internal */\r\n    public url?: string;\r\n    /** @internal */\r\n    public logger?: ILogger;\r\n\r\n    /** If defined, this indicates the client should automatically attempt to reconnect if the connection is lost. */\r\n    /** @internal */\r\n    public reconnectPolicy?: IRetryPolicy;\r\n\r\n    private _statefulReconnectBufferSize?: number;\r\n\r\n    /** Configures console logging for the {@link @microsoft/signalr.HubConnection}.\r\n     *\r\n     * @param {LogLevel} logLevel The minimum level of messages to log. Anything at this level, or a more severe level, will be logged.\r\n     * @returns The {@link @microsoft/signalr.HubConnectionBuilder} instance, for chaining.\r\n     */\r\n    public configureLogging(logLevel: LogLevel): HubConnectionBuilder;\r\n\r\n    /** Configures custom logging for the {@link @microsoft/signalr.HubConnection}.\r\n     *\r\n     * @param {ILogger} logger An object implementing the {@link @microsoft/signalr.ILogger} interface, which will be used to write all log messages.\r\n     * @returns The {@link @microsoft/signalr.HubConnectionBuilder} instance, for chaining.\r\n     */\r\n    public configureLogging(logger: ILogger): HubConnectionBuilder;\r\n\r\n    /** Configures custom logging for the {@link @microsoft/signalr.HubConnection}.\r\n     *\r\n     * @param {string} logLevel A string representing a LogLevel setting a minimum level of messages to log.\r\n     *    See {@link https://learn.microsoft.com/aspnet/core/signalr/configuration#configure-logging|the documentation for client logging configuration} for more details.\r\n     */\r\n    public configureLogging(logLevel: string): HubConnectionBuilder;\r\n\r\n    /** Configures custom logging for the {@link @microsoft/signalr.HubConnection}.\r\n     *\r\n     * @param {LogLevel | string | ILogger} logging A {@link @microsoft/signalr.LogLevel}, a string representing a LogLevel, or an object implementing the {@link @microsoft/signalr.ILogger} interface.\r\n     *    See {@link https://learn.microsoft.com/aspnet/core/signalr/configuration#configure-logging|the documentation for client logging configuration} for more details.\r\n     * @returns The {@link @microsoft/signalr.HubConnectionBuilder} instance, for chaining.\r\n     */\r\n    public configureLogging(logging: LogLevel | string | ILogger): HubConnectionBuilder;\r\n    public configureLogging(logging: LogLevel | string | ILogger): HubConnectionBuilder {\r\n        Arg.isRequired(logging, \"logging\");\r\n\r\n        if (isLogger(logging)) {\r\n            this.logger = logging;\r\n        } else if (typeof logging === \"string\") {\r\n            const logLevel = parseLogLevel(logging);\r\n            this.logger = new ConsoleLogger(logLevel);\r\n        } else {\r\n            this.logger = new ConsoleLogger(logging);\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    /** Configures the {@link @microsoft/signalr.HubConnection} to use HTTP-based transports to connect to the specified URL.\r\n     *\r\n     * The transport will be selected automatically based on what the server and client support.\r\n     *\r\n     * @param {string} url The URL the connection will use.\r\n     * @returns The {@link @microsoft/signalr.HubConnectionBuilder} instance, for chaining.\r\n     */\r\n    public withUrl(url: string): HubConnectionBuilder;\r\n\r\n    /** Configures the {@link @microsoft/signalr.HubConnection} to use the specified HTTP-based transport to connect to the specified URL.\r\n     *\r\n     * @param {string} url The URL the connection will use.\r\n     * @param {HttpTransportType} transportType The specific transport to use.\r\n     * @returns The {@link @microsoft/signalr.HubConnectionBuilder} instance, for chaining.\r\n     */\r\n    public withUrl(url: string, transportType: HttpTransportType): HubConnectionBuilder;\r\n\r\n    /** Configures the {@link @microsoft/signalr.HubConnection} to use HTTP-based transports to connect to the specified URL.\r\n     *\r\n     * @param {string} url The URL the connection will use.\r\n     * @param {IHttpConnectionOptions} options An options object used to configure the connection.\r\n     * @returns The {@link @microsoft/signalr.HubConnectionBuilder} instance, for chaining.\r\n     */\r\n    public withUrl(url: string, options: IHttpConnectionOptions): HubConnectionBuilder;\r\n    public withUrl(url: string, transportTypeOrOptions?: IHttpConnectionOptions | HttpTransportType): HubConnectionBuilder {\r\n        Arg.isRequired(url, \"url\");\r\n        Arg.isNotEmpty(url, \"url\");\r\n\r\n        this.url = url;\r\n\r\n        // Flow-typing knows where it's at. Since HttpTransportType is a number and IHttpConnectionOptions is guaranteed\r\n        // to be an object, we know (as does TypeScript) this comparison is all we need to figure out which overload was called.\r\n        if (typeof transportTypeOrOptions === \"object\") {\r\n            this.httpConnectionOptions = { ...this.httpConnectionOptions, ...transportTypeOrOptions };\r\n        } else {\r\n            this.httpConnectionOptions = {\r\n                ...this.httpConnectionOptions,\r\n                transport: transportTypeOrOptions,\r\n            };\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    /** Configures the {@link @microsoft/signalr.HubConnection} to use the specified Hub Protocol.\r\n     *\r\n     * @param {IHubProtocol} protocol The {@link @microsoft/signalr.IHubProtocol} implementation to use.\r\n     */\r\n    public withHubProtocol(protocol: IHubProtocol): HubConnectionBuilder {\r\n        Arg.isRequired(protocol, \"protocol\");\r\n\r\n        this.protocol = protocol;\r\n        return this;\r\n    }\r\n\r\n    /** Configures the {@link @microsoft/signalr.HubConnection} to automatically attempt to reconnect if the connection is lost.\r\n     * By default, the client will wait 0, 2, 10 and 30 seconds respectively before trying up to 4 reconnect attempts.\r\n     */\r\n    public withAutomaticReconnect(): HubConnectionBuilder;\r\n\r\n    /** Configures the {@link @microsoft/signalr.HubConnection} to automatically attempt to reconnect if the connection is lost.\r\n     *\r\n     * @param {number[]} retryDelays An array containing the delays in milliseconds before trying each reconnect attempt.\r\n     * The length of the array represents how many failed reconnect attempts it takes before the client will stop attempting to reconnect.\r\n     */\r\n    public withAutomaticReconnect(retryDelays: number[]): HubConnectionBuilder;\r\n\r\n    /** Configures the {@link @microsoft/signalr.HubConnection} to automatically attempt to reconnect if the connection is lost.\r\n     *\r\n     * @param {IRetryPolicy} reconnectPolicy An {@link @microsoft/signalR.IRetryPolicy} that controls the timing and number of reconnect attempts.\r\n     */\r\n    public withAutomaticReconnect(reconnectPolicy: IRetryPolicy): HubConnectionBuilder;\r\n    public withAutomaticReconnect(retryDelaysOrReconnectPolicy?: number[] | IRetryPolicy): HubConnectionBuilder {\r\n        if (this.reconnectPolicy) {\r\n            throw new Error(\"A reconnectPolicy has already been set.\");\r\n        }\r\n\r\n        if (!retryDelaysOrReconnectPolicy) {\r\n            this.reconnectPolicy = new DefaultReconnectPolicy();\r\n        } else if (Array.isArray(retryDelaysOrReconnectPolicy)) {\r\n            this.reconnectPolicy = new DefaultReconnectPolicy(retryDelaysOrReconnectPolicy);\r\n        } else {\r\n            this.reconnectPolicy = retryDelaysOrReconnectPolicy;\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    /** Configures {@link @microsoft/signalr.HubConnection.serverTimeoutInMilliseconds} for the {@link @microsoft/signalr.HubConnection}.\r\n     *\r\n     * @returns The {@link @microsoft/signalr.HubConnectionBuilder} instance, for chaining.\r\n     */\r\n    public withServerTimeout(milliseconds: number): HubConnectionBuilder {\r\n        Arg.isRequired(milliseconds, \"milliseconds\");\r\n\r\n        this._serverTimeoutInMilliseconds = milliseconds;\r\n\r\n        return this;\r\n    }\r\n\r\n    /** Configures {@link @microsoft/signalr.HubConnection.keepAliveIntervalInMilliseconds} for the {@link @microsoft/signalr.HubConnection}.\r\n     *\r\n     * @returns The {@link @microsoft/signalr.HubConnectionBuilder} instance, for chaining.\r\n     */\r\n    public withKeepAliveInterval(milliseconds: number): HubConnectionBuilder {\r\n        Arg.isRequired(milliseconds, \"milliseconds\");\r\n\r\n        this._keepAliveIntervalInMilliseconds = milliseconds;\r\n\r\n        return this;\r\n    }\r\n\r\n    /** Enables and configures options for the Stateful Reconnect feature.\r\n     *\r\n     * @returns The {@link @microsoft/signalr.HubConnectionBuilder} instance, for chaining.\r\n     */\r\n    public withStatefulReconnect(options?: IStatefulReconnectOptions): HubConnectionBuilder {\r\n        if (this.httpConnectionOptions === undefined) {\r\n            this.httpConnectionOptions = {};\r\n        }\r\n        this.httpConnectionOptions._useStatefulReconnect = true;\r\n\r\n        this._statefulReconnectBufferSize = options?.bufferSize;\r\n\r\n        return this;\r\n    }\r\n\r\n    /** Creates a {@link @microsoft/signalr.HubConnection} from the configuration options specified in this builder.\r\n     *\r\n     * @returns {HubConnection} The configured {@link @microsoft/signalr.HubConnection}.\r\n     */\r\n    public build(): HubConnection {\r\n        // If httpConnectionOptions has a logger, use it. Otherwise, override it with the one\r\n        // provided to configureLogger\r\n        const httpConnectionOptions = this.httpConnectionOptions || {};\r\n\r\n        // If it's 'null', the user **explicitly** asked for null, don't mess with it.\r\n        if (httpConnectionOptions.logger === undefined) {\r\n            // If our logger is undefined or null, that's OK, the HttpConnection constructor will handle it.\r\n            httpConnectionOptions.logger = this.logger;\r\n        }\r\n\r\n        // Now create the connection\r\n        if (!this.url) {\r\n            throw new Error(\"The 'HubConnectionBuilder.withUrl' method must be called before building the connection.\");\r\n        }\r\n        const connection = new HttpConnection(this.url, httpConnectionOptions);\r\n\r\n        return HubConnection.create(\r\n            connection,\r\n            this.logger || NullLogger.instance,\r\n            this.protocol || new JsonHubProtocol(),\r\n            this.reconnectPolicy,\r\n            this._serverTimeoutInMilliseconds,\r\n            this._keepAliveIntervalInMilliseconds,\r\n            this._statefulReconnectBufferSize);\r\n    }\r\n}\r\n\r\nfunction isLogger(logger: any): logger is ILogger {\r\n    return logger.log !== undefined;\r\n}\r\n"],"names":["DEFAULT_RETRY_DELAYS_IN_MILLISECONDS","DefaultReconnectPolicy","constructor","retryDelays","this","_retryDelays","undefined","nextRetryDelayInMilliseconds","retryContext","previousRetryCount","HeaderNames","Authorization","Cookie","HttpResponse","statusCode","statusText","content","HttpClient","get","url","options","send","method","post","delete","getCookieString","AccessTokenHttpClient","innerClient","accessTokenFactory","super","_innerClient","_accessTokenFactory","request","allowRetry","_accessToken","indexOf","_setAuthorizationHeader","response","headers","HttpError","Error","errorMessage","trueProto","prototype","__proto__","TimeoutError","arguments","length","AbortError","UnsupportedTransportError","message","transport","errorType","DisabledTransportError","FailedToStartTransportError","FailedToNegotiateWithServerError","AggregateErrors","innerErrors","LogLevel","NullLogger","log","_logLevel","_message","instance","Arg","isRequired","val","name","isNotEmpty","match","isIn","values","Platform","isBrowser","isNode","window","document","isWebWorker","self","isReactNative","process","release","getDataDetail","data","includeContent","detail","isArrayBuffer","byteLength","view","Uint8Array","str","forEach","num","toString","substr","formatArrayBuffer","ArrayBuffer","async","sendMessage","logger","transportName","httpClient","value","getUserAgentHeader","Trace","logMessageContent","responseType","timeout","withCredentials","SubjectSubscription","subject","observer","_subject","_observer","dispose","index","observers","splice","cancelCallback","catch","_","ConsoleLogger","minimumLogLevel","_minLevel","out","console","logLevel","msg","Date","toISOString","Critical","error","Warning","warn","Information","info","userAgentHeaderName","constructUserAgent","getOsName","getRuntime","getRuntimeVersion","version","os","runtime","runtimeVersion","userAgent","majorAndMinor","split","platform","versions","node","getErrorString","e","stack","FetchHttpClient","_logger","fetch","requireFunc","__non_webpack_require__","_jar","_fetchType","bind","globalThis","global","getGlobalThis","AbortController","_abortControllerType","abortSignal","aborted","abortController","onabort","abort","timeoutId","msTimeout","setTimeout","body","cache","credentials","mode","redirect","signal","clearTimeout","ok","deserializeContent","status","payload","cookies","getCookies","c","join","arrayBuffer","text","XhrHttpClient","Promise","reject","resolve","xhr","XMLHttpRequest","open","setRequestHeader","Object","keys","header","onload","responseText","onerror","ontimeout","DefaultHttpClient","_httpClient","HttpTransportType","TransferFormat","_isAborted","LongPollingTransport","pollAborted","_pollAbort","_options","_running","onreceive","onclose","connect","transferFormat","_url","Binary","pollOptions","pollUrl","now","_closeError","_receiving","_poll","_raiseOnClose","stop","deleteOptions","err","logMessage","ServerSentEventsTransport","accessToken","encodeURIComponent","eventSource","opened","Text","EventSource","onmessage","_close","onopen","_eventSource","close","WebSocketTransport","webSocketConstructor","_logMessageContent","_webSocketConstructor","_headers","token","webSocket","replace","binaryType","_event","_webSocket","event","ErrorEvent","readyState","OPEN","_isCloseEvent","wasClean","code","reason","HttpConnection","_stopPromiseResolver","features","_negotiateVersion","baseUrl","_resolveUrl","webSocketModule","eventSourceModule","WebSocket","_connectionState","_connectionStarted","start","Debug","_startInternalPromise","_startInternal","_stopPromise","_sendQueue","TransportSendQueue","_stopInternal","_stopError","_stopConnection","skipNegotiation","WebSockets","_constructTransport","_startTransport","negotiateResponse","redirects","_getNegotiationResponse","ProtocolVersion","_createTransport","inherentKeepAlive","negotiateUrl","_resolveNegotiateUrl","JSON","parse","negotiateVersion","connectionToken","connectionId","useStatefulReconnect","_useStatefulReconnect","_createConnectUrl","requestedTransport","requestedTransferFormat","connectUrl","_isITransport","transportExceptions","transports","availableTransports","negotiate","endpoint","transportOrError","_resolveTransportOrError","push","ex","ServerSentEvents","LongPolling","reconnect","callStop","disconnected","resend","actualTransport","transportMatches","transferFormats","map","s","lastIndexOf","aTag","createElement","href","URL","pathname","endsWith","searchParams","URLSearchParams","has","append","search","_transport","_buffer","_executing","_sendBufferedData","PromiseSource","_transportResult","_sendLoopPromise","_sendLoop","_bufferData","promise","transportResult","_concatBuffers","arrayBuffers","totalLength","b","reduce","a","result","offset","item","set","buffer","_resolver","_rejecter","TextMessageFormat","write","output","RecordSeparator","input","messages","pop","RecordSeparatorCode","String","fromCharCode","HandshakeProtocol","writeHandshakeRequest","handshakeRequest","stringify","parseHandshakeResponse","messageData","remainingData","binaryData","separatorIndex","responseLength","apply","Array","slice","call","textData","substring","type","MessageType","Subject","next","complete","subscribe","MessageBuffer","protocol","connection","bufferSize","_bufferSize","_messages","_totalMessageCount","_waitForSequenceMessage","_nextReceivingSequenceId","_latestReceivedSequenceId","_bufferedByteCount","_reconnectInProgress","_protocol","_connection","_send","serializedMessage","writeMessage","backpressurePromise","_isInvocationMessage","backpressurePromiseResolver","backpressurePromiseRejector","BufferedItem","_disconnected","_ack","ackMessage","newestAckedMessage","element","_id","sequenceId","_shouldProcessMessage","Sequence","currentId","_ackTimer","_resetSequence","_resend","_dispose","_rejector","Invocation","StreamItem","Completion","StreamInvocation","CancelInvocation","Close","Ping","Ack","_ackTimerHandle","id","resolver","rejector","HubConnectionState","HubConnection","create","reconnectPolicy","serverTimeoutInMilliseconds","keepAliveIntervalInMilliseconds","statefulReconnectBufferSize","_nextKeepAlive","_freezeEventListener","_statefulReconnectBufferSize","_reconnectPolicy","_handshakeProtocol","_processIncomingData","_connectionClosed","_callbacks","_methods","_closedCallbacks","_reconnectingCallbacks","_reconnectedCallbacks","_invocationId","_receivedHandshakeResponse","Disconnected","_cachedPingMessage","state","Reconnecting","_startPromise","_startWithStateTransitions","Connecting","addEventListener","Connected","_stopDuringStartError","handshakePromise","_handshakeResolver","_handshakeRejecter","_sendMessage","_cleanupTimeout","_resetTimeoutPeriod","_resetKeepAliveInterval","_messageBuffer","_cleanupPingTimer","startPromise","Disconnecting","_reconnectDelayHandle","_completeClose","_sendCloseMessage","_sendWithProtocol","_createCloseMessage","stream","methodName","_len","args","_key","streams","streamIds","_replaceStreamingParams","invocationDescriptor","_createStreamInvocation","promiseQueue","cancelInvocation","_createCancelInvocation","invocationId","then","invocationEvent","_launchStreams","_len2","_key2","sendPromise","_createInvocation","invoke","_len3","_key3","on","newMethod","toLowerCase","off","handlers","removeIdx","callback","onreconnecting","onreconnected","_processHandshakeResponse","parseMessages","_invokeClientMethod","allowReconnect","responseMessage","getTime","_timeoutHandle","serverTimeout","_pingServerHandle","nextPing","invocationMessage","target","methods","_createCompletionMessage","methodsCopy","expectsResponse","res","exception","completionMessage","m","prevRes","_cancelCallbacksWithError","_reconnect","removeEventListener","reconnectStartTime","previousReconnectAttempts","retryError","nextRetryDelay","_getNextRetryDelay","elapsedMilliseconds","retryReason","callbacks","key","nonblocking","streamId","_createStreamItemMessage","i","argument","_isObservable","arg","JsonHubProtocol","hubMessages","parsedMessage","_isStreamItemMessage","_isCompletionMessage","_isAckMessage","_isSequenceMessage","_assertNotEmptyString","LogLevelNameMapping","trace","debug","information","warning","critical","none","None","HubConnectionBuilder","configureLogging","logging","mapping","parseLogLevel","withUrl","transportTypeOrOptions","httpConnectionOptions","withHubProtocol","withAutomaticReconnect","retryDelaysOrReconnectPolicy","isArray","withServerTimeout","milliseconds","_serverTimeoutInMilliseconds","withKeepAliveInterval","_keepAliveIntervalInMilliseconds","withStatefulReconnect","build"],"sourceRoot":""}