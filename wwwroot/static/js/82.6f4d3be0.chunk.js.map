{"version":3,"file":"static/js/82.6f4d3be0.chunk.js","mappings":"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","sources":["API.tsx","assets/Icons/ArrowDown.tsx","assets/Icons/Chats.tsx","Dashboard/Page/Chat.tsx","assets/Icons/SendIcon.tsx"],"sourcesContent":["export const ApiHost = `https://localhost:5280`\r\n/* export const ApiHost = `` */","const ArrowDown = () => {\r\n  return (\r\n    <svg\r\n      width=\"20\"\r\n      height=\"12\"\r\n      viewBox=\"0 0 20 12\"\r\n      fill=\"none\"\r\n      xmlns=\"http://www.w3.org/2000/svg\"\r\n    >\r\n      <path\r\n        d=\"M19.5598 0.458879C19.2778 0.165059 18.8954 0 18.4967 0C18.098 0 17.7157 0.165059 17.4337 0.458879L9.99092 8.21692L2.54815 0.458879C2.26457 0.173386 1.88476 0.0154123 1.49052 0.0189838C1.09629 0.0225544 0.719168 0.187384 0.44039 0.47797C0.161613 0.768557 0.00348282 1.16165 5.72205e-05 1.57259C-0.00336838 1.98352 0.148186 2.37942 0.422075 2.67501L8.92789 11.5411C9.20985 11.8349 9.59222 12 9.99092 12C10.3896 12 10.772 11.8349 11.054 11.5411L19.5598 2.67501C19.8416 2.3811 20 1.98253 20 1.56695C20 1.15136 19.8416 0.752788 19.5598 0.458879Z\"\r\n        fill=\"#2B2B2B\"\r\n      />\r\n    </svg>\r\n  );\r\n};\r\n\r\nexport default ArrowDown;\r\n","\r\nconst Chats = () => {\r\n  return (\r\n    <svg width=\"68\" height=\"68\" viewBox=\"0 0 68 68\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\r\n    <rect width=\"68\" height=\"68\" rx=\"34\" fill=\"#81A220\"/>\r\n    <path d=\"M19.6239 44.8945H23.2479V52.3549L32.4907 44.8945H41.3675C43.3661 44.8945 44.9915 43.2547 44.9915 41.2383V26.6135C44.9915 24.5971 43.3661 22.9573 41.3675 22.9573H19.6239C17.6253 22.9573 16 24.5971 16 26.6135V41.2383C16 43.2547 17.6253 44.8945 19.6239 44.8945Z\" fill=\"#FCFCFC\"/>\r\n    <path d=\"M48.6156 15.645H26.872C24.8734 15.645 23.248 17.2848 23.248 19.3012H44.9916C46.9902 19.3012 48.6156 20.941 48.6156 22.9574V37.5821C50.6142 37.5821 52.2395 35.9423 52.2395 33.926V19.3012C52.2395 17.2848 50.6142 15.645 48.6156 15.645Z\" fill=\"#FCFCFC\"/>\r\n    </svg>\r\n  )\r\n}\r\n\r\nexport default Chats\r\n","import { HubConnection, HubConnectionBuilder } from \"@microsoft/signalr\";\r\nimport { useEffect, useRef, useState } from \"react\";\r\nimport axios from \"axios\";\r\nimport ChatIcon from \"../../assets/Icons/Chats\";\r\nimport \"../Style/Chat.css\";\r\nimport SendIcon from \"../../assets/Icons/SendIcon\";\r\nimport { ApiHost } from \"../../API\";\r\nimport { Correct } from \"../../assets/Icons/Correct\";\r\nimport ArrowDown from \"../../assets/Icons/ArrowDown\";\r\n\r\ninterface Message {\r\n  user: string;\r\n  message: string;\r\n}\r\n\r\nconst Chat = () => {\r\n  const [connection, setConnection] = useState<HubConnection | null>(null);\r\n  const [messages, setMessages] = useState<Message[]>([]);\r\n  const [message, setMessage] = useState<string>(\"\");\r\n  const [, setIsConnected] = useState<boolean>(false);\r\n  const [userId, setUserId] = useState<string>(\"\");\r\n  const messagesEndRef = useRef<HTMLDivElement | null>(null); // مرجع لآخر رسالة\r\n  const [dataUser, setDataUser] = useState<any>();\r\n  const [toggleShowChat, setToggleShowChat] = useState(false);\r\n\r\n  // جلب بيانات المستخدم عند بداية التشغيل\r\n  useEffect(() => {\r\n    try {\r\n      if (localStorage.getItem(\"bank_Auth\")) {\r\n        const DataUser = JSON.parse(localStorage.getItem(\"bank_Auth\") || \"\");\r\n        setDataUser(DataUser);\r\n        setUserId(DataUser.username);\r\n      } else {\r\n        axios\r\n          .post(`${ApiHost}/api/MessageUser/generate-random-user`)\r\n          .then((res) => {\r\n            if (res.data) {\r\n              localStorage.setItem(\"bank_Auth\", JSON.stringify(res.data.user));\r\n              setUserId(res.data.user.username);\r\n              setDataUser(res.data.user);\r\n            }\r\n          });\r\n      }\r\n    } catch {\r\n\r\n    }\r\n\r\n  }, []);\r\n\r\n  // جلب الرسائل من API عند بداية التشغيل\r\n  useEffect(() => {\r\n    try {\r\n      if (userId) {\r\n\r\n        axios\r\n          .get(`${ApiHost}/api/MessageUser/messages?username=${dataUser.username}&password=${dataUser.password}`)\r\n          .then((res) => {\r\n            const apiMessages = res.data.messages.map((msg: any) => ({\r\n              user: msg.sender_type === \"user\" ? \"user\" : \"Admin\",\r\n              message: msg.message_text,\r\n            }));\r\n            setMessages(apiMessages);\r\n          })\r\n          .catch((err) => {\r\n            console.error(\"Error fetching messages: \", err);\r\n          });\r\n\r\n        const newConnection = new HubConnectionBuilder()\r\n          .withUrl(`${ApiHost}/chathub?user_name=${userId}`)\r\n          .withAutomaticReconnect()\r\n          .build();\r\n\r\n        newConnection\r\n          .start()\r\n          .then(() => {\r\n            console.log(\"SignalR Connected!\");\r\n            setIsConnected(true);\r\n          })\r\n          .catch((err) => {\r\n            console.error(\"Connection Error: \", err);\r\n            setIsConnected(false);\r\n          });\r\n\r\n        newConnection.on(\"ReceiveMessage\", (user: string, message: string) => {\r\n          setMessages((prev) => [...prev, { user, message }]);\r\n        });\r\n\r\n        setConnection(newConnection);\r\n\r\n        return () => {\r\n          newConnection.stop();\r\n        };\r\n      }\r\n    } catch {\r\n\r\n    }\r\n\r\n  }, [userId]);\r\n\r\n  // التمرير للأسفل عند تحديث الرسائل\r\n  useEffect(() => {\r\n    messagesEndRef.current?.scrollIntoView({ behavior: \"smooth\" });\r\n  }, [messages]);\r\n\r\n  // إرسال الرسالة إلى المشرف\r\n  const sendMessageToAdmin = async (e: any) => {\r\n    e.preventDefault();\r\n\r\n    if (!connection || !message.trim()) return;\r\n\r\n    const newMessage = { user: \"user\", message };\r\n    setMessage(\"\");\r\n    try {\r\n      await axios.post(`${ApiHost}/api/MessageUser/send-message-user`, {\r\n        username: dataUser.username,\r\n        password: dataUser.password,\r\n        messageText: message,\r\n      });\r\n\r\n      setMessages((prev) => [...prev, newMessage]);\r\n    } catch {\r\n\r\n    }\r\n\r\n\r\n    try {\r\n      await connection.invoke(\"SendMessage\", userId, message);\r\n    } catch (err) {\r\n      console.error(\"Error sending message: \", err);\r\n    }\r\n // تفريغ الحقل بعد إرسال الرسالة\r\n  };\r\n\r\n  const toggleChat = () => {\r\n    setToggleShowChat((prev) => !prev);\r\n  };\r\n\r\n  return (\r\n    <div className=\"user-chat\">\r\n      <span onClick={toggleChat} className=\"toggle-chat\"><ChatIcon /> <span>دردشة مباشرة</span> </span>\r\n      {toggleShowChat ? (\r\n        <form onSubmit={sendMessageToAdmin}>\r\n          <h2>   <span> دردشة مع الدعم الفني</span><span onClick={toggleChat}> <ArrowDown/></span></h2>\r\n          <ul>\r\n            {messages.map((msg, index) => (\r\n              <li className={msg.user === \"Admin\" ? \"left\" : \"right\"} key={index}>\r\n                <span>{msg.message}</span>\r\n              </li>\r\n            ))}\r\n            <div ref={messagesEndRef} />\r\n          </ul>\r\n          <div className=\"input-group-chat\">\r\n\r\n            <input\r\n              type=\"text\"\r\n              value={message}\r\n              onChange={(e) => setMessage(e.target.value)}\r\n              placeholder=\"أرسل رسالة\"\r\n            />\r\n            <button onClick={sendMessageToAdmin}>\r\n              <SendIcon /> \r\n            </button>\r\n          </div>\r\n        </form>\r\n      ) : null}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Chat;\r\n","\r\nconst SendIcon = () => {\r\n  return (\r\n    <svg width=\"40\" height=\"40\" viewBox=\"0 0 40 40\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\r\n<rect width=\"40\" height=\"40\" rx=\"20\" transform=\"matrix(-1 0 0 1 40 0)\" fill=\"#81A321\"/>\r\n<path d=\"M24.3333 20L27 28L11 20L27 12L24.3333 20ZM24.3333 20H19\" stroke=\"#FCFCFC\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/>\r\n</svg>\r\n\r\n  )\r\n}\r\n\r\nexport default SendIcon\r\n"],"names":["ApiHost","ArrowDown","_jsx","width","height","viewBox","fill","xmlns","children","d","Chats","_jsxs","rx","Chat","connection","setConnection","useState","messages","setMessages","message","setMessage","setIsConnected","userId","setUserId","messagesEndRef","useRef","dataUser","setDataUser","toggleShowChat","setToggleShowChat","useEffect","localStorage","getItem","DataUser","JSON","parse","username","axios","post","then","res","data","setItem","stringify","user","get","password","apiMessages","map","msg","sender_type","message_text","catch","err","console","error","newConnection","HubConnectionBuilder","withUrl","withAutomaticReconnect","build","start","log","on","prev","stop","_messagesEndRef$curre","current","scrollIntoView","behavior","sendMessageToAdmin","async","e","preventDefault","trim","newMessage","messageText","invoke","toggleChat","className","onClick","ChatIcon","onSubmit","index","ref","type","value","onChange","target","placeholder","SendIcon","transform","stroke"],"sourceRoot":""}